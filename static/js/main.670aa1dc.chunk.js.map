{"version":3,"sources":["utils/initial-data.js","actions/data.js","actions/labels.js","actions/menu.js","components/CardModalMenu.js","components/CardModal.js","components/Card.js","components/NewCard.js","components/List.js","components/NewList.js","components/App.js","components/Nav.js","reducers/data.js","reducers/menu.js","reducers/labels.js","reducers/index.js","index.js"],"names":["initialData","tasks","id","content","time","labels","showCardModal","showCardModalMenu","columns","title","taskIds","columnOrder","taskCount","columnCount","RECEIVE_INITIAL_DATA","UPDATE_DATA","ADD_NEW_LIST","CHANGE_LIST_TITLE","ADD_NEW_CARD","COPY_LIST","SORT_LIST","DELETE_ALL_CARDS","DELETE_LIST","CHANGE_CARD_CONTENT","TOGGLE_LABEL","TOGGLE_CARD_MODAL","TOGGLE_CARD_MODAL_MENU","CHANGE_CARD_MODAL_MENU_TYPE","DELETE_LABEL","DELETE_CARD","COPY_CARD","updateData","data","type","changeListTitle","listId","sortList","column","sortType","toggleCardModal","bool","task","toggleCardModalMenu","menuType","changeCardModalMenuType","CREATE_LABEL","EDIT_LABEL","TOGGLE_EDIT_LABEL","toggleEditLabel","labelId","TOGGLE_ADD_CARD","GET_POSITION","TOGGLE_LABEL_SIZE","GET_SEARCH_INPUT","toggleAddCard","LabelCard","styled","div","props","background","darken","LabelColorPicker","span","lighten","CardModalMenu","size","bg","onClose","dispatch","useDispatch","useSelector","store","useState","colorSelected","setColorSelected","editLabel","find","label","edit","searchInput","menu","regex","RegExp","searchInputRef","useRef","demo","name","input","setInput","useEffect","undefined","color","console","log","className","Fragment","onClick","placeholder","value","ref","autoFocus","onChange","e","getSearchInput","target","filter","test","map","index","toggleLabel","style","textOverflow","overflow","whiteSpace","maxWidth","mapLabel","htmlFor","verticalAlign","length","Math","random","toString","substr","CardModal","show","showModalMenu","position","textarea","current","select","windowSize","useMemo","height","window","innerHeight","width","innerWidth","modalPosition","top","left","stopPropagation","spellCheck","preventDefault","newContent","changeCardContent","copyCard","deleteCard","LabelSpan","minified","hover","Card","setHover","setPosition","labelSize","miniLabel","element","labelHover","setLabelHover","cardLabelDiv","taskLabels","rect","getBoundingClientRect","x","y","bottom","right","draggableId","provided","snapshot","onMouseEnter","onMouseLeave","draggableProps","dragHandleProps","innerRef","isDragging","classList","toggle","onMouseOver","taskLabel","updatedLabel","getPosition","NewCard","cardShow","inputField","addCard","newCard","listener","event","code","document","addEventListener","removeEventListener","onBlur","List","setShow","menuShow","setMenuShow","menuState","setMenuState","textInput","listMenu","InnerList","React","memo","contains","visibility","copyList","deleteAllCards","deleteList","droppableId","isDraggingOver","droppableProps","NewList","addNewList","focus","App","getInitialData","onDragEnd","result","destination","source","start","finish","newTaskIds","Array","from","splice","newColumn","newState","startTaskIds","newStart","finishTaskIds","newFinish","newColumnOrder","direction","columnId","taskId","Nav","state","new","action","cardCount","Date","now","concat","copyListColumnCount","slice","copiedListTasksArray","Object","keys","copiedListTasks","reduce","assign","stateTasksCopy","sort","a","b","firstname","newColumns","copyTasks","defaultState","combineReducers","createStore","reducer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.670aa1dc.chunk.js","sourcesContent":["const initialData = {\r\n  tasks: {\r\n    'task-1': {\r\n      id: 'task-1',\r\n      content: 'Take out the garbage',\r\n      time: 1629713661276,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-2': {\r\n      id: 'task-2',\r\n      content: 'Watch my fav show',\r\n      time: 1629713661266,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-3': {\r\n      id: 'task-3',\r\n      content: 'Charge my phone',\r\n      time: 1629713661256,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-4': {\r\n      id: 'task-4',\r\n      content: 'Cook dinner',\r\n      time: 1629713661246,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-5': {\r\n      id: 'task-5',\r\n      content: 'Watch my fav show',\r\n      time: 1629713661236,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-6': {\r\n      id: 'task-6',\r\n      content: 'Charge my phone',\r\n      time: 1629713661226,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-7': {\r\n      id: 'task-7',\r\n      content: 'Cook dinner',\r\n      time: 1629713661216,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n  },\r\n  columns: {\r\n    'column-1': {\r\n      id: 'column-1',\r\n      title: 'To do',\r\n      taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\r\n    },\r\n    'column-2': {\r\n      id: 'column-2',\r\n      title: 'In Progress',\r\n      taskIds: [],\r\n    },\r\n  },\r\n  // Facilitate reordering of the columns\r\n  columnOrder: ['column-1', 'column-2'],\r\n  taskCount: 7,\r\n  columnCount: 2,\r\n};\r\nexport default initialData;\r\n","export const RECEIVE_INITIAL_DATA = 'RECEIVE_INITIAL_DATA';\r\nexport const UPDATE_DATA = 'UPDATE_DATA';\r\nexport const ADD_NEW_LIST = 'ADD_NEW_LIST';\r\nexport const CHANGE_LIST_TITLE = 'CHANGE_LIST_TITLE';\r\nexport const ADD_NEW_CARD = 'ADD_NEW_CARD';\r\nexport const COPY_LIST = 'COPY_LIST';\r\nexport const SORT_LIST = 'SORT_LIST';\r\nexport const DELETE_ALL_CARDS = 'DELETE_ALL_CARDS';\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const CHANGE_CARD_CONTENT = 'CHANGE_CARD_CONTENT';\r\nexport const TOGGLE_LABEL = 'TOGGLE_LABEL';\r\nexport const TOGGLE_CARD_MODAL = 'TOGGLE_CARD_MODAL';\r\nexport const TOGGLE_CARD_MODAL_MENU = 'TOGGLE_CARD_MODAL_MENU';\r\nexport const CHANGE_CARD_MODAL_MENU_TYPE = 'CHANGE_CARD_MODAL_MENU_TYPE';\r\nexport const DELETE_LABEL = 'DELETE_LABEL';\r\nexport const DELETE_CARD = 'DELETE_CARD';\r\nexport const COPY_CARD = 'COPY_CARD';\r\n\r\nexport const getInitialData = (data) => ({ type: RECEIVE_INITIAL_DATA, data });\r\n\r\nexport const updateData = (data) => ({ type: UPDATE_DATA, data });\r\nexport const handleNewList = (content) => ({ type: ADD_NEW_LIST, content });\r\nexport const changeListTitle = (title, listId) => ({\r\n  type: CHANGE_LIST_TITLE,\r\n  title,\r\n  listId,\r\n});\r\n\r\nexport const addNewCard = (content, listId) => ({\r\n  type: ADD_NEW_CARD,\r\n  content,\r\n  listId,\r\n});\r\n\r\nexport const copyList = (column, index) => ({ type: COPY_LIST, column, index });\r\n\r\nexport const sortList = (column, sortType) => ({\r\n  type: SORT_LIST,\r\n  sortType,\r\n  column,\r\n});\r\n\r\nexport const deleteAllCards = (column) => ({ type: DELETE_ALL_CARDS, column });\r\n\r\nexport const deleteList = (column) => ({ type: DELETE_LIST, column });\r\n\r\nexport const changeCardContent = (task, newContent) => ({\r\n  type: CHANGE_CARD_CONTENT,\r\n  task,\r\n  newContent,\r\n});\r\n\r\nexport const toggleLabel = (task, label) => ({\r\n  type: TOGGLE_LABEL,\r\n  task,\r\n  label,\r\n});\r\n\r\nexport const toggleCardModal = (bool, task) => ({\r\n  type: TOGGLE_CARD_MODAL,\r\n  task,\r\n  bool,\r\n});\r\n\r\nexport const toggleCardModalMenu = (bool, task, menuType) => ({\r\n  type: TOGGLE_CARD_MODAL_MENU,\r\n  bool,\r\n  task,\r\n  menuType,\r\n});\r\n\r\nexport const changeCardModalMenuType = (task, menuType) => ({\r\n  type: CHANGE_CARD_MODAL_MENU_TYPE,\r\n  task,\r\n  menuType,\r\n});\r\n\r\nexport const deleteLabelFromTask = (labelId) => ({\r\n  type: DELETE_LABEL,\r\n  labelId,\r\n});\r\n\r\nexport const deleteCard = (task, column) => ({\r\n  type: DELETE_CARD,\r\n  task,\r\n  column,\r\n});\r\n\r\nexport const copyCard = (task, column, id) => ({\r\n  type: COPY_CARD,\r\n  task,\r\n  column,\r\n  id,\r\n});\r\n","export const CREATE_LABEL = 'CREATE_LABEL';\r\nexport const EDIT_LABEL = 'EDIT_LABEL';\r\nexport const DELETE_LABEL = 'DELETE_LABEL';\r\nexport const TOGGLE_EDIT_LABEL = 'TOGGLE_EDIT_LABEL';\r\nexport const createLabel = (label) => ({ type: CREATE_LABEL, label });\r\n\r\nexport const editLabel = (labelId, name, color) => ({\r\n  type: EDIT_LABEL,\r\n  labelId,\r\n  name,\r\n  color,\r\n});\r\nexport const deleteLabel = (labelId) => ({ type: DELETE_LABEL, labelId });\r\n\r\nexport const toggleEditLabel = (labelId = '', bool) => ({\r\n  type: TOGGLE_EDIT_LABEL,\r\n  labelId,\r\n  bool,\r\n});\r\n","export const TOGGLE_ADD_CARD = 'TOGGLE_ADD_CARD';\r\nexport const TOGGLE_CARD_MODAL = 'TOGGLE_CARD_MODAL';\r\nexport const TOGGLE_CARD_MODAL_MENU = 'TOGGLE_CARD_MODAL_MENU';\r\nexport const GET_POSITION = 'GET_POSITION';\r\nexport const ADD_MODAL_STATE = 'ADD_MODAL_STATE';\r\nexport const TOGGLE_LABEL_SIZE = 'TOGGLE_LABEL_SIZE';\r\nexport const GET_SEARCH_INPUT = 'GET_SEARCH_INPUT';\r\nexport const toggleAddCard = (bool, column) => ({\r\n  type: TOGGLE_ADD_CARD,\r\n  bool,\r\n  column,\r\n});\r\n\r\nexport const toggleCardModal = (bool, task) => ({\r\n  type: TOGGLE_CARD_MODAL,\r\n  task,\r\n  bool,\r\n});\r\n\r\nexport const toggleCardModalMenu = (bool, task, menuType) => ({\r\n  type: TOGGLE_CARD_MODAL_MENU,\r\n  bool,\r\n  task,\r\n  menuType,\r\n});\r\n\r\nexport const getPosition = (task, position) => {\r\n  return {\r\n    type: GET_POSITION,\r\n    task,\r\n    position,\r\n  };\r\n};\r\n\r\nexport const addModalState = () => ({ type: ADD_MODAL_STATE });\r\n\r\nexport const miniLabel = () => ({ type: TOGGLE_LABEL_SIZE });\r\nexport const getSearchInput = (input) => ({ type: GET_SEARCH_INPUT, input });\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport { BsPencil } from 'react-icons/bs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { darken, lighten } from 'polished';\r\nimport { FaCheck } from 'react-icons/fa';\r\nimport {\r\n  toggleLabel,\r\n  changeCardModalMenuType,\r\n  deleteLabelFromTask,\r\n} from '../actions/data';\r\nimport { AiOutlineLeft } from 'react-icons/ai';\r\nimport {\r\n  toggleEditLabel,\r\n  editLabel as editLabelFunc,\r\n  createLabel,\r\n} from '../actions/labels';\r\nimport { getSearchInput, toggleCardModalMenu } from '../actions/menu';\r\n\r\nconst LabelCard = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 244px;\r\n  height: 32px;\r\n  border-radius: 4px;\r\n  line-height: 20px;\r\n  padding: 6px 12px;\r\n  font-weight: 700;\r\n  color: white;\r\n  margin-right: 4px;\r\n  position: relative;\r\n  background-color: ${(props) => props.background};\r\n  transition: all 0.2s;\r\n  cursor: pointer;\r\n  &:hover {\r\n    box-shadow: -8px 0 ${(props) => darken(0.1, props.background)};\r\n    padding-left: 20px;\r\n  }\r\n`;\r\n\r\nconst LabelColorPicker = styled.span`\r\n  display: inline-block;\r\n  width: 48px;\r\n  height: 32px;\r\n  margin: 0 8px 8px 0;\r\n  background: ${(props) => props.background};\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  color: white;\r\n  text-align: center;\r\n  line-height: 32px;\r\n  border-radius: 4px;\r\n  flex-basis: 48px;\r\n  &:hover {\r\n    background: ${(props) => lighten(0.1, props.background)};\r\n  }\r\n  &:nth-of-type(5n) {\r\n    margin-right: 0;\r\n  }\r\n`;\r\n\r\nconst SizeBtn = styled.div`\r\n  border-radius: 4px;\r\n  border: 1px solid lightgrey;\r\n  height: 64px;\r\n  width: 136px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  display: relative;\r\n  z-index: 1;\r\n`;\r\n\r\nconst SizeBtnTop = styled.div`\r\n  height: ${(props) => (props.size === 'small' ? '28px' : '100%')};\r\n  position: relative;\r\n  z-index: ${(props) => (props.size === 'small' ? '1' : '-10')};\r\n  background: ${(props) => (props.bg === null ? 'lightgrey' : props.bg)};\r\n`;\r\nconst SizeBtnBottom = styled.div`\r\n  padding: 6px 4px 4px 6px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n`;\r\n// const LongRow = styled.div`\r\n//   height: 4px;\r\n//   width: 122px;\r\n//   margin-right: 4px;\r\n//   background: ${(props) => (props.bg === null ? 'lightgrey' : '#6B778C')};\r\n//   border-radius: 4px;\r\n// `;\r\n// const ShortRow = styled.div`\r\n//   height: 4px;\r\n//   width: 98px;\r\n//   background: ${(props) => (props.bg === null ? 'lightgrey' : '#6B778C')};\r\n//   border-radius: 4px;\r\n//   margin-bottom: 6px;\r\n// `;\r\n\r\nconst CardModalMenu = ({ onClose, task }) => {\r\n  const dispatch = useDispatch();\r\n  const labels = useSelector((store) => store.labels);\r\n  const [colorSelected, setColorSelected] = useState(null);\r\n  const editLabel = useSelector((store) =>\r\n    store.labels.find((label) => label.edit === true)\r\n  );\r\n  const searchInput = useSelector((store) => store.menu.searchInput);\r\n  const regex = new RegExp(`(${searchInput})`, 'i');\r\n  const searchInputRef = useRef(null);\r\n\r\n  // const type = useSelector((store) => store.menu.tasks[task.id].menuType);\r\n  const type = useSelector((store) => store.data.demo.tasks[task.id].menuType);\r\n\r\n  const [input, setInput] = useState(editLabel?.name ? editLabel.name : '');\r\n  const colors = [\r\n    '#61bd4f',\r\n    '#f2d600',\r\n    '#ff9f1a',\r\n    '#eb5a46',\r\n    '#c377e0',\r\n    '#0079bf',\r\n    '#00c2e0',\r\n    '#51e898',\r\n    '#ff78cb',\r\n    '#344563',\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (editLabel !== undefined && colorSelected === null) {\r\n      setColorSelected(editLabel.color);\r\n    }\r\n  }, [editLabel, colorSelected]);\r\n  console.log('colorSelected', colorSelected);\r\n\r\n  return (\r\n    <div className='card-modal-menu-div'>\r\n      {type === 'label' && (\r\n        <React.Fragment>\r\n          <div className='card-modal-menu-header'>\r\n            <span>Labels</span>\r\n            <IoClose className='card-modal-menu-icon' onClick={onClose} />\r\n          </div>\r\n          <div className='card-modal-menu-main'>\r\n            <input\r\n              type='search'\r\n              placeholder='Search labels...'\r\n              value={searchInput}\r\n              ref={searchInputRef}\r\n              autoFocus\r\n              onChange={(e) => {\r\n                dispatch(getSearchInput(e.target.value));\r\n              }}\r\n            />\r\n            <h6>LABELS</h6>\r\n            <ul>\r\n              {/* {labels.filter((label) => regex.test(label.content))} */}\r\n              {labels\r\n                .filter((label) => regex.test(label.name) === true)\r\n                .map((label, index) => (\r\n                  <li key={index}>\r\n                    <LabelCard\r\n                      background={label.color}\r\n                      onClick={() => {\r\n                        dispatch(toggleLabel(task, label));\r\n                      }}\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          textOverflow: 'ellipsis',\r\n                          overflow: 'hidden',\r\n                          whiteSpace: 'nowrap',\r\n                          maxWidth: '190px',\r\n                        }}\r\n                      >\r\n                        {label.name}\r\n                      </span>\r\n                      {task.labels?.find(\r\n                        (mapLabel) => mapLabel.id === label.id\r\n                      ) && <FaCheck />}\r\n                    </LabelCard>\r\n                    <div\r\n                      onClick={() => {\r\n                        dispatch(toggleEditLabel(label.id, true));\r\n                        dispatch(changeCardModalMenuType(task, 'edit-label'));\r\n                      }}\r\n                      className='edit-button'\r\n                    >\r\n                      <BsPencil className='label-card-edit-icon' size={14} />\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n          </div>\r\n          <div className='card-modal-menu-footer'>\r\n            <button\r\n              onClick={() =>\r\n                dispatch(changeCardModalMenuType(task, 'create-label'))\r\n              }\r\n              className='create-new-label-btn'\r\n            >\r\n              Create a new label\r\n            </button>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n      {(type === 'edit-label' || type === 'create-label') && (\r\n        <React.Fragment>\r\n          <div className='card-modal-menu-header'>\r\n            <AiOutlineLeft\r\n              onClick={() => {\r\n                if (type === 'edit-label') {\r\n                  dispatch(toggleEditLabel(editLabel.id, false));\r\n                }\r\n                // if (type === 'cover') {\r\n                //   dispatch(toggleCardModalMenu(false, task));\r\n                // }\r\n                dispatch(changeCardModalMenuType(task, 'label'));\r\n              }}\r\n              className='card-modal-menu-icon'\r\n            />\r\n            <span>\r\n              {type === 'edit-label'\r\n                ? 'Change label'\r\n                : type === 'create-label'\r\n                ? 'Create label'\r\n                : type === 'cover'\r\n                ? 'Cover'\r\n                : null}\r\n            </span>\r\n            <IoClose className='card-modal-menu-icon' onClick={onClose} />\r\n          </div>\r\n          <div className='card-modal-menu-main no-border-bottom'>\r\n            {(type === 'create-label' || type === 'edit-label') && (\r\n              <React.Fragment>\r\n                <label htmlFor='text-input'>\r\n                  <h6>Name</h6>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  value={input}\r\n                  onChange={(e) => setInput(e.target.value)}\r\n                  id='text-input'\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n            {/* {type === 'cover' && (\r\n              <React.Fragment>\r\n                <h6>SIZE</h6>\r\n                <div className='size-btn-div'>\r\n                  <div className='size-btn size-btn-sm'>\r\n                    <SizeBtnTop bg={colorSelected} size='small' />\r\n                    <div className='bottom'>\r\n                      <div className='row-long'></div>\r\n                      <div className='row-short'></div>\r\n                      <div className='row-3'>\r\n                        <div className='left'>\r\n                          <div></div>\r\n                          <div></div>\r\n                        </div>\r\n                        <div className='right'></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='size-btn size-btn-full'>\r\n                    <SizeBtnTop bg={colorSelected} size='full' />\r\n                    <div className='row-div'>\r\n                      <div className='row-long'></div>\r\n                      <div className='row-short'></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </React.Fragment>\r\n            )} */}\r\n            <h6>Select a color</h6>\r\n            <div className='color-select-div'>\r\n              {colors.map((color, index) => (\r\n                <LabelColorPicker\r\n                  key={index}\r\n                  background={color}\r\n                  onClick={() => setColorSelected(color)}\r\n                >\r\n                  {colorSelected === color && (\r\n                    <FaCheck style={{ verticalAlign: 'middle' }} />\r\n                  )}\r\n                </LabelColorPicker>\r\n              ))}\r\n            </div>\r\n            <div className='card-modal-menu-buttons'>\r\n              <button\r\n                onClick={() => {\r\n                  if (input.length > 0) {\r\n                    if (type === 'edit-label') {\r\n                      dispatch(\r\n                        editLabelFunc(editLabel.id, input, colorSelected)\r\n                      );\r\n                    }\r\n                    if (type === 'create-label') {\r\n                      const ID = () =>\r\n                        '_' + Math.random().toString(36).substr(2, 9);\r\n                      const id = ID();\r\n                      dispatch(\r\n                        createLabel({\r\n                          id,\r\n                          name: input,\r\n                          color: colorSelected,\r\n                          edit: false,\r\n                        })\r\n                      );\r\n                    }\r\n                    dispatch(changeCardModalMenuType(task, 'label'));\r\n                  }\r\n                }}\r\n                className='btn-primary'\r\n              >\r\n                {type === 'edit-label'\r\n                  ? `Save`\r\n                  : type === 'create-label'\r\n                  ? 'Create'\r\n                  : null}\r\n              </button>\r\n              {type === 'edit-label' && (\r\n                <button\r\n                  onClick={() => {\r\n                    dispatch(deleteLabelFromTask(editLabel.id));\r\n                    dispatch(changeCardModalMenuType(task, 'label'));\r\n                  }}\r\n                  className='btn-danger'\r\n                >\r\n                  Delete\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default CardModalMenu;\r\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  BsCardText,\r\n  BsFillTagFill,\r\n  BsCardImage,\r\n  BsTrashFill,\r\n} from 'react-icons/bs';\r\nimport { FaCopy } from 'react-icons/fa';\r\nimport { changeCardContent, copyCard } from '../actions/data';\r\nimport CardModalMenu from './CardModalMenu';\r\nimport {\r\n  toggleCardModal,\r\n  toggleCardModalMenu,\r\n  deleteCard,\r\n} from '../actions/data';\r\nimport { toggleEditLabel } from '../actions/labels';\r\n\r\nconst CardModal = ({ show, onClose, task, column }) => {\r\n  const [input, setInput] = useState(task.content);\r\n  // const showModalMenu = useSelector(\r\n  //   (store) => store.menu.tasks[task.id].showCardModalMenu\r\n  // );\r\n  const showModalMenu = useSelector(\r\n    (store) => store.data.demo.tasks[task.id].showCardModalMenu\r\n  );\r\n  console.log('showModalMenu', showModalMenu);\r\n  const type = useSelector((store) => store.data.demo.tasks[task.id].menuType);\r\n  console.log('type', type);\r\n  const editLabel = useSelector((store) =>\r\n    store.labels.find((label) => label.edit === true)\r\n  );\r\n\r\n  const position = useSelector((store) => store.menu.tasks[task.id].position);\r\n  const textarea = useRef(null);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (type === undefined) {\r\n      textarea.current?.select();\r\n    }\r\n  }, []);\r\n\r\n  const windowSize = useMemo(() => {\r\n    return {\r\n      height: window.innerHeight,\r\n      width: window.innerWidth,\r\n    };\r\n  }, []);\r\n\r\n  console.log('windowSize', windowSize);\r\n  const modalPosition = () => {\r\n    let top = position?.top;\r\n    let left = position?.left;\r\n\r\n    if (position?.top + 82 > windowSize.height) {\r\n      console.log('working.....');\r\n      top = windowSize.height - 250;\r\n    }\r\n    if (position?.left > windowSize.width) {\r\n      left = windowSize.width;\r\n    }\r\n    if (position?.top < 0) {\r\n      top = 141;\r\n    }\r\n    if (position?.left < 0) {\r\n      left = 26;\r\n    }\r\n    if (position?.left + 354 > windowSize.width) {\r\n      left = windowSize.width - 354;\r\n    }\r\n    if (windowSize.height - position?.top < 120) {\r\n      top = windowSize.height - 250;\r\n    }\r\n    return { top, left };\r\n  };\r\n\r\n  if (show === false) {\r\n    return null;\r\n  }\r\n  console.log('position', position);\r\n  return (\r\n    <div className='card-modal-div' onClick={onClose}>\r\n      <div\r\n        style={{\r\n          top: modalPosition().top - windowSize.height / 2 + 60,\r\n          left:\r\n            modalPosition().left -\r\n            windowSize.width / 2 +\r\n            position?.width / 2 +\r\n            48,\r\n        }}\r\n        className='card-modal-content'\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        <div className='left'>\r\n          <textarea\r\n            ref={textarea}\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            spellCheck={false}\r\n          />\r\n          <button\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              if (input.length > 0) {\r\n                dispatch(changeCardContent(task, input));\r\n                dispatch(toggleCardModal(false, task));\r\n              }\r\n            }}\r\n            className='text-save-btn'\r\n          >\r\n            Save\r\n          </button>\r\n        </div>\r\n        <div className='right'>\r\n          {/* <button\r\n            onClick={() => {\r\n              dispatch(toggleCardModalMenu(true, task, 'card'));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <BsCardText size={16} className='side-btn-icon' /> Open card\r\n          </button> */}\r\n          <button\r\n            onClick={() => {\r\n              dispatch(toggleCardModalMenu(true, task, 'label'));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <BsFillTagFill size={16} className='side-btn-icon' /> Edit labels\r\n          </button>\r\n          {/* <button\r\n            onClick={() => {\r\n              dispatch(toggleCardModalMenu(true, task, 'cover'));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <BsCardImage size={16} className='side-btn-icon' /> Change cover\r\n          </button> */}\r\n          <button\r\n            onClick={() => {\r\n              const ID = () => '_' + Math.random().toString(36).substr(2, 9);\r\n              const id = ID();\r\n              dispatch(copyCard(task, column, id));\r\n              dispatch(toggleCardModal(false, task));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <FaCopy size={16} className='side-btn-icon' /> Copy\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              dispatch(deleteCard(task, column));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <BsTrashFill size={16} className='side-btn-icon' /> Delete\r\n          </button>\r\n        </div>\r\n        {showModalMenu === true && (\r\n          <CardModalMenu\r\n            onClose={() => {\r\n              dispatch(toggleEditLabel(editLabel?.id, false));\r\n              dispatch(toggleCardModalMenu(false, task));\r\n            }}\r\n            task={task}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CardModal;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Draggable, useMouseSensor } from 'react-beautiful-dnd';\r\nimport { BsPencil } from 'react-icons/bs';\r\nimport CardModal from './CardModal';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getPosition, getSearchInput, miniLabel } from '../actions/menu';\r\nimport {\r\n  changeCardModalMenuType,\r\n  toggleCardModal,\r\n  toggleCardModalMenu,\r\n} from '../actions/data';\r\nimport { toggleEditLabel } from '../actions/labels';\r\nimport { darken } from 'polished';\r\n\r\nconst LabelSpan = styled.span`\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-weight: 700;\r\n  margin: 0 4px 4px 0;\r\n  padding: 0 8px;\r\n  max-width: 210px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  width: ${(props) => (props.minified ? '40px' : 'auto')};\r\n  height: ${(props) => (props.minified ? '8px' : 'auto')};\r\n  background: ${(props) =>\r\n    props.hover ? darken(0.1, props.background) : props.background};\r\n`;\r\n\r\nconst Card = ({ task, index, column }) => {\r\n  const [hover, setHover] = useState(false);\r\n  const [position, setPosition] = useState(null);\r\n  const labelSize = useSelector((store) => store.menu.miniLabel);\r\n  const element = useRef('');\r\n  const dispatch = useDispatch();\r\n  const editLabel = useSelector((store) =>\r\n    store.labels.find((label) => label.edit === true)\r\n  );\r\n  const [labelHover, setLabelHover] = useState(false);\r\n  const cardLabelDiv = useRef(null);\r\n\r\n  const showCardModal = useSelector(\r\n    (store) => store.data.demo.tasks[task.id].showCardModal\r\n  );\r\n  const taskLabels = useSelector(\r\n    (store) => store.data.demo.tasks[task.id].labels\r\n  );\r\n  const labels = useSelector((store) => store.labels);\r\n\r\n  useEffect(() => {\r\n    const rect = element.current.getBoundingClientRect();\r\n    setPosition({\r\n      x: rect.x,\r\n      y: rect.y,\r\n      top: rect.top,\r\n      bottom: rect.bottom,\r\n      left: rect.left,\r\n      right: rect.right,\r\n      width: rect.width,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Draggable draggableId={task.id} index={index}>\r\n        {(provided, snapshot) => (\r\n          <div\r\n            onMouseEnter={() => setHover(true)}\r\n            onMouseLeave={() => setHover(false)}\r\n            className='card-container'\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n            isDragging={snapshot.isDragging}\r\n          >\r\n            <div ref={element}>\r\n              {labels.length > 0 && (\r\n                <div\r\n                  className={`card-label-div`}\r\n                  onClick={() => {\r\n                    dispatch(miniLabel());\r\n                    cardLabelDiv.current.classList.toggle('active');\r\n                    console.log('carddfg', cardLabelDiv.current.classList);\r\n                  }}\r\n                  onMouseOver={() => setLabelHover(true)}\r\n                  onMouseLeave={() => setLabelHover(false)}\r\n                  ref={cardLabelDiv}\r\n                >\r\n                  {taskLabels.map((taskLabel, index) => {\r\n                    const updatedLabel = labels.find(\r\n                      (label) => label.id === taskLabel.id\r\n                    );\r\n                    return (\r\n                      <LabelSpan\r\n                        key={index}\r\n                        background={updatedLabel.color}\r\n                        hover={labelHover}\r\n                        minified={labelSize}\r\n                      >\r\n                        {!labelSize && updatedLabel.name}\r\n                      </LabelSpan>\r\n                    );\r\n                    // if (!labelSize) {\r\n                    //   return (\r\n                    //     <LabelSpan\r\n                    //       key={index}\r\n                    //       background={updatedLabel.color}\r\n                    //       hover={labelHover}\r\n                    //     >\r\n                    //       {updatedLabel.name}\r\n                    //     </LabelSpan>\r\n                    //   );\r\n                    // } else {\r\n                    //   return (\r\n                    //     <LabelSpanMini\r\n                    //       background={updatedLabel.color}\r\n                    //       hover={labelHover}\r\n                    //     />\r\n                    //   );\r\n                    // }\r\n                  })}\r\n                </div>\r\n              )}\r\n              {task.content}\r\n              {hover === true && (\r\n                <BsPencil\r\n                  onClick={() => {\r\n                    dispatch(getPosition(task, position));\r\n                    dispatch(toggleCardModal(true, task));\r\n                  }}\r\n                  className='card-container-icon'\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n      {showCardModal === true && (\r\n        <CardModal\r\n          show={showCardModal}\r\n          onClose={() => {\r\n            // dispatch(getSearchInput(''));\r\n            dispatch(toggleCardModal(false, task));\r\n            dispatch(toggleCardModalMenu(false, task, 'label'));\r\n            dispatch(toggleEditLabel(editLabel?.id, false));\r\n          }}\r\n          task={task}\r\n          column={column}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Card;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BiPlus } from 'react-icons/bi';\r\nimport { addNewCard } from '../actions/data';\r\nimport { toggleAddCard } from '../actions/menu';\r\nimport { IoClose } from 'react-icons/io5';\r\n\r\nconst NewCard = ({ column, cardShow }) => {\r\n  const [input, setInput] = useState('');\r\n  const inputField = useRef();\r\n  const dispatch = useDispatch();\r\n  const addCard = useSelector((store) => store.menu[column]?.addCard);\r\n\r\n  useEffect(() => {\r\n    dispatch(toggleAddCard(false, column));\r\n  }, [column]);\r\n\r\n  const newCard = () => {\r\n    if (input.length > 0) {\r\n      dispatch(addNewCard(input, column));\r\n      setInput('');\r\n      // setShow(false);\r\n      dispatch(toggleAddCard(false, column));\r\n    }\r\n  };\r\n  const reset = () => {\r\n    setInput('');\r\n    // setShow(false);\r\n    dispatch(toggleAddCard(false, column));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const listener = (event) => {\r\n      if (event.code === 'Enter' || event.code === 'NumpadEnter') {\r\n        event.preventDefault();\r\n        newCard();\r\n      }\r\n    };\r\n    document.addEventListener('keydown', listener);\r\n    return () => document.removeEventListener('keydown', listener);\r\n  }, [input]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {addCard !== true ? (\r\n        <span\r\n          className='add-new-card-btn'\r\n          onClick={() => dispatch(toggleAddCard(true, column))}\r\n        >\r\n          <BiPlus size={24} /> Add a card\r\n        </span>\r\n      ) : (\r\n        <div className='add-new-card-menu'>\r\n          <textarea\r\n            type='text'\r\n            value={input}\r\n            placeholder='Enter a title for this card...'\r\n            onChange={(e) => setInput(e.target.value)}\r\n            ref={inputField}\r\n            onBlur={() => {\r\n              if (input.length === 0) {\r\n                dispatch(toggleAddCard(false, column));\r\n              }\r\n            }}\r\n            autoFocus\r\n          />\r\n          <div className='btn-div'>\r\n            <button onClick={newCard}>Add Card</button>\r\n            <button className='transparent' onClick={reset}>\r\n              <IoClose size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default NewCard;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  changeListTitle,\r\n  copyList,\r\n  deleteAllCards,\r\n  deleteList,\r\n  sortList,\r\n} from '../actions/data';\r\nimport Card from './Card';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport NewCard from './NewCard';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport { toggleAddCard } from '../actions/menu';\r\nimport { AiOutlineLeft } from 'react-icons/ai';\r\n\r\n//if min-height not declared in tasklist, drop area height will be 0px\r\n\r\nconst List = ({ column, tasks, index }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [input, setInput] = useState('');\r\n  const [menuShow, setMenuShow] = useState(false);\r\n  const [menuState, setMenuState] = useState('menu');\r\n\r\n  const dispatch = useDispatch();\r\n  const textInput = useRef('');\r\n  const listMenu = useRef(null);\r\n  const InnerList = React.memo(function InnerList({ tasks }) {\r\n    return tasks.map((task, index) => (\r\n      <Card key={task.id} task={task} index={index} column={column} />\r\n    ));\r\n  });\r\n\r\n  useEffect(() => {\r\n    const listener = (event) => {\r\n      if (event.code === 'Enter' || event.code === 'NumpadEnter') {\r\n        event.preventDefault();\r\n        if (input.length > 0) {\r\n          dispatch(changeListTitle(input, column.id));\r\n          setInput('');\r\n          setShow(false);\r\n        }\r\n      }\r\n    };\r\n    document.addEventListener('keydown', listener);\r\n    return () => document.removeEventListener('keydown', listener);\r\n  }, [input]);\r\n\r\n  useEffect(() => {\r\n    const listener = (event) => {\r\n      if (\r\n        listMenu &&\r\n        listMenu.current &&\r\n        !listMenu.current.contains(event.target)\r\n      ) {\r\n        if (event.target.className !== 'list-menu-item') {\r\n          event.preventDefault();\r\n          setMenuShow(false);\r\n          setMenuState('menu');\r\n        }\r\n      }\r\n    };\r\n    if (menuShow === true) {\r\n      document.addEventListener('click', listener);\r\n    }\r\n    return () => document.removeEventListener('click', listener);\r\n  }, [menuShow]);\r\n  return (\r\n    <Draggable draggableId={column.id} index={index}>\r\n      {(provided) => (\r\n        <React.Fragment>\r\n          <div\r\n            className='list-container'\r\n            {...provided.draggableProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            {show === false ? (\r\n              <div className='title-div'>\r\n                <h3\r\n                  className='title'\r\n                  {...provided.dragHandleProps}\r\n                  onClick={() => setShow(true)}\r\n                >\r\n                  {column.title}\r\n                </h3>\r\n                <BsThreeDots\r\n                  className='icon'\r\n                  onClick={() => setMenuShow(menuShow === false ? true : false)}\r\n                />\r\n                {menuShow === true ? (\r\n                  <React.Fragment>\r\n                    <div className='list-menu-div' ref={listMenu}>\r\n                      <div className='list-menu-header'>\r\n                        <AiOutlineLeft\r\n                          onClick={() => setMenuState('menu')}\r\n                          className='list-menu-icon'\r\n                          style={{\r\n                            visibility: menuState !== 'sort' && 'hidden',\r\n                          }}\r\n                        />\r\n                        <span>\r\n                          {menuState === 'sort' ? `Sort List` : `List actions`}\r\n                        </span>\r\n                        <IoClose\r\n                          className='list-menu-icon'\r\n                          onClick={() => setMenuShow(false)}\r\n                        />\r\n                      </div>\r\n                      <div className='list-menu-main'>\r\n                        {menuState === 'menu' ? (\r\n                          <React.Fragment>\r\n                            <span\r\n                              className='list-menu-item'\r\n                              onClick={() => {\r\n                                dispatch(toggleAddCard(true, column.id));\r\n                                setMenuShow(false);\r\n                              }}\r\n                            >\r\n                              Add card...\r\n                            </span>\r\n                            <span\r\n                              className='list-menu-item'\r\n                              onClick={() => {\r\n                                dispatch(copyList(column, index));\r\n                                setMenuShow(false);\r\n                              }}\r\n                            >\r\n                              Copy list...\r\n                            </span>\r\n                            <span\r\n                              onClick={() => setMenuState('sort')}\r\n                              className='list-menu-item'\r\n                            >\r\n                              Sort by...\r\n                            </span>\r\n                            <span\r\n                              onClick={() => dispatch(deleteAllCards(column))}\r\n                              className='list-menu-item'\r\n                            >\r\n                              Delete all cards in this list\r\n                            </span>\r\n                            <span\r\n                              onClick={() => dispatch(deleteList(column))}\r\n                              className='list-menu-item'\r\n                            >\r\n                              Delete this list\r\n                            </span>\r\n                          </React.Fragment>\r\n                        ) : null}\r\n                        {menuState === 'sort' ? (\r\n                          <React.Fragment>\r\n                            <span\r\n                              onClick={() =>\r\n                                dispatch(sortList(column, 'newest'))\r\n                              }\r\n                              className='list-menu-item'\r\n                            >\r\n                              Date created (newest first)\r\n                            </span>\r\n                            <span\r\n                              onClick={() =>\r\n                                dispatch(sortList(column, 'oldest'))\r\n                              }\r\n                              className='list-menu-item'\r\n                            >\r\n                              Date created (oldest first)\r\n                            </span>\r\n                            <span\r\n                              onClick={() => dispatch(sortList(column, 'abc'))}\r\n                              className='list-menu-item'\r\n                            >\r\n                              Card name (alphabetically)\r\n                            </span>\r\n                          </React.Fragment>\r\n                        ) : null}\r\n                      </div>\r\n                    </div>\r\n                  </React.Fragment>\r\n                ) : null}\r\n              </div>\r\n            ) : (\r\n              <input\r\n                type='text'\r\n                value={input}\r\n                onChange={(e) => setInput(e.target.value)}\r\n                ref={textInput}\r\n                autoFocus\r\n                onBlur={() => {\r\n                  if (input.length > 0) {\r\n                    dispatch(changeListTitle(input, column.id));\r\n                  }\r\n                  setInput('');\r\n                  setShow(false);\r\n                }}\r\n                {...provided.dragHandleProps}\r\n              ></input>\r\n            )}\r\n\r\n            <Droppable droppableId={column.id} type='task'>\r\n              {(provided, snapshot) => (\r\n                <div\r\n                  className='card-list'\r\n                  ref={provided.innerRef}\r\n                  isDraggingOver={snapshot.isDraggingOver}\r\n                  {...provided.droppableProps}\r\n                >\r\n                  <InnerList tasks={tasks} />\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n            <NewCard column={column.id} />\r\n            {/* <NewCardMemo column={column.id} /> */}\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\nexport default List;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { handleNewList } from '../actions/data';\r\nimport { useDispatch } from 'react-redux';\r\nimport { BiPlus } from 'react-icons/bi';\r\nimport { IoClose } from 'react-icons/io5';\r\n\r\nconst NewList = () => {\r\n  const [show, setShow] = useState(false);\r\n  const [input, setInput] = useState('');\r\n  const inputField = useRef();\r\n  const dispatch = useDispatch();\r\n\r\n  const addNewList = () => {\r\n    if (input.length > 0) {\r\n      dispatch(handleNewList(input));\r\n      setInput('');\r\n      inputField.current.focus();\r\n    }\r\n  };\r\n  const reset = () => {\r\n    setInput('');\r\n    setShow(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const listener = (event) => {\r\n      if (event.code === 'Enter' || event.code === 'NumpadEnter') {\r\n        event.preventDefault();\r\n        addNewList();\r\n      }\r\n    };\r\n    document.addEventListener('keydown', listener);\r\n    return () => document.removeEventListener('keydown', listener);\r\n  }, [input]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {show === false ? (\r\n        <span className='add-new-list-btn' onClick={() => setShow(true)}>\r\n          <BiPlus size={24} /> Add Another List\r\n        </span>\r\n      ) : (\r\n        <div className='add-new-list-menu'>\r\n          <input\r\n            type='text'\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            ref={inputField}\r\n            onBlur={() => {\r\n              if (input.length === 0) {\r\n                setShow(false);\r\n              }\r\n            }}\r\n            placeholder='Enter list title...'\r\n            autoFocus\r\n          />\r\n          <div className='btn-div'>\r\n            <button onClick={addNewList}>Add List</button>\r\n            <button className='transparent' onClick={reset}>\r\n              <IoClose size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default NewList;\r\n","import React, { useEffect } from 'react';\nimport initialData from '../utils/initial-data';\nimport '@atlaskit/css-reset';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport List from './List';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getInitialData, updateData } from '../actions/data';\nimport NewList from './NewList';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const store = useSelector((store) => store);\n  console.log('store', store);\n  const data = useSelector((store) => store.data.demo);\n  console.log('data', data);\n\n  useEffect(() => {\n    dispatch(getInitialData(initialData));\n  }, [dispatch]);\n\n  //onDragStart\n  // start = {\n  //   draggableId: 'task-1',\n  //   type: 'TYPE',\n  //   source: {\n  //     droppableId: 'column-1',\n  //     index: 0\n  //   }\n  // }\n  //onDragUpdate\n  // update = {\n  //   ...start,\n  //   destination: {\n  //     droppableId: 'column-1',\n  //     index: 1\n  //   }\n  // }\n\n  const onDragEnd = (result) => {\n    // example of result object\n    // result = {\n    //   draggableId: 'task-1',\n    //   type: 'TYPE',\n    //   reason: 'DROP', -- can be DROP or CANCEL\n    //   source: {\n    //     droppableId: 'column-1',\n    //     index: 0\n    //   },\n    //   -- DESTINATION CAN BE NULL (IF DROPPED OUTSIDE ETC.) --\n    //   destination: {\n    //     droppableId: 'column-1',\n    //     index: 1\n    //   }\n    // }\n\n    //reorder our column\n    const { destination, source, draggableId, type } = result;\n\n    // if there's no destination, there's no need to\n    // reorder the column\n    if (!destination) {\n      return;\n    }\n\n    // if destination is same with the source\n    // item stayed in the same position\n    // hence no need to reorder the column\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(data.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...data,\n        columnOrder: newColumnOrder,\n      };\n      dispatch(updateData(newState));\n      return;\n    }\n\n    const start = data.columns[source.droppableId];\n    const finish = data.columns[destination.droppableId];\n\n    // if start and finish columns are the same\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1); // removes ONE item FROM index\n      newTaskIds.splice(destination.index, 0, draggableId); // adds item to destination index\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds,\n      };\n      const newState = {\n        ...data,\n        columns: {\n          ...data.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n      console.log('result', result);\n      console.log('newState', newState);\n      dispatch(updateData(newState));\n      return;\n    }\n\n    // moving from one list to another\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n\n    const newState = {\n      ...data,\n      columns: {\n        ...data.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n\n    dispatch(updateData(newState));\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId='all-columns' direction='horizontal' type='column'>\n        {(provided) => (\n          <div\n            className='container'\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n          >\n            {data?.columnOrder?.map((columnId, index) => {\n              const column = data.columns[columnId];\n              const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n              return (\n                <List\n                  key={column.id}\n                  column={column}\n                  tasks={tasks}\n                  index={index}\n                />\n              );\n            })}\n            {provided.placeholder}\n            <NewList />\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport { IoMdListBox } from 'react-icons/io';\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div className='nav-div'>\r\n      <div className='nav-top'>\r\n        <IoMdListBox size={22} style={{ verticalAlign: 'middle' }} />\r\n        <span>Trello-Clone</span>\r\n      </div>\r\n      <div className='nav-bottom'></div>\r\n    </div>\r\n  );\r\n};\r\nexport default Nav;\r\n","import {\r\n  RECEIVE_INITIAL_DATA,\r\n  UPDATE_DATA,\r\n  ADD_NEW_LIST,\r\n  CHANGE_LIST_TITLE,\r\n  ADD_NEW_CARD,\r\n  COPY_LIST,\r\n  SORT_LIST,\r\n  DELETE_ALL_CARDS,\r\n  DELETE_LIST,\r\n  CHANGE_CARD_CONTENT,\r\n  TOGGLE_LABEL,\r\n  TOGGLE_CARD_MODAL,\r\n  TOGGLE_CARD_MODAL_MENU,\r\n  CHANGE_CARD_MODAL_MENU_TYPE,\r\n  DELETE_LABEL,\r\n  DELETE_CARD,\r\n  COPY_CARD,\r\n} from '../actions/data';\r\n\r\nconst data = (\r\n  state = {\r\n    demo: {},\r\n    new: { tasks: {}, columns: {}, columnOrder: [], taskCount: 0 },\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case RECEIVE_INITIAL_DATA:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...action.data,\r\n        },\r\n      };\r\n    case UPDATE_DATA:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          ...action.data,\r\n        },\r\n      };\r\n    case ADD_NEW_LIST:\r\n      let columnCount = state.demo.columnCount;\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [`column-${columnCount + 1}`]: {\r\n              id: `column-${columnCount + 1}`,\r\n              title: action.content,\r\n              taskIds: [],\r\n            },\r\n          },\r\n          columnOrder: [...state.demo.columnOrder, `column-${columnCount + 1}`],\r\n          columnCount: columnCount + 1,\r\n        },\r\n      };\r\n    case CHANGE_LIST_TITLE:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.listId]: {\r\n              ...state.demo.columns[action.listId],\r\n              title: action.title,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case ADD_NEW_CARD:\r\n      const cardCount = state.demo.taskCount;\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [`task-${cardCount + 1}`]: {\r\n              id: `task-${cardCount + 1}`,\r\n              content: action.content,\r\n              labels: [],\r\n              time: Date.now(),\r\n              showCardModal: false,\r\n              showCardModalMenu: false,\r\n            },\r\n          },\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.listId]: {\r\n              ...state.demo.columns[action.listId],\r\n              taskIds: state.demo.columns[action.listId].taskIds.concat(\r\n                `task-${cardCount + 1}`\r\n              ),\r\n            },\r\n          },\r\n          taskCount: cardCount + 1,\r\n        },\r\n      };\r\n    case COPY_LIST:\r\n      let copyListColumnCount = state.demo.columnCount;\r\n      console.log('copyListColumnCount', copyListColumnCount);\r\n      const newColumnOrder = state.demo.columnOrder.slice();\r\n      newColumnOrder.splice(\r\n        action.index,\r\n        0,\r\n        `column-${copyListColumnCount + 1}`\r\n      );\r\n\r\n      if (action.column.taskIds.length === 0) {\r\n        return {\r\n          ...state,\r\n          demo: {\r\n            ...state.demo,\r\n            columns: {\r\n              ...state.demo.columns,\r\n              [`column-${copyListColumnCount + 1}`]: {\r\n                ...action.column,\r\n                id: `column-${copyListColumnCount + 1}`,\r\n              },\r\n            },\r\n            columnOrder: newColumnOrder,\r\n            columnCount: copyListColumnCount + 1,\r\n          },\r\n        };\r\n      }\r\n      //creates new tasks with new taskIds in an array\r\n      const copiedListTasksArray = action.column.taskIds.map((task, index) => ({\r\n        [`task-${Object.keys(state.demo.tasks).length + index + 1}`]: {\r\n          ...state.demo.tasks[task],\r\n          id: `task-${Object.keys(state.demo.tasks).length + index + 1}`,\r\n        },\r\n      }));\r\n      //reduces copiedListTasksArray in a new object\r\n      const copiedListTasks = copiedListTasksArray.reduce((target, current) =>\r\n        Object.assign(target, current)\r\n      );\r\n      //copies state.tasks without mutating the state\r\n      const stateTasksCopy = Object.assign({}, state.demo.tasks);\r\n\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: Object.assign(stateTasksCopy, copiedListTasks),\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [`column-${state.demo.columnOrder.length + 1}`]: {\r\n              ...action.column,\r\n              id: `column-${state.demo.columnOrder.length + 1}`,\r\n              taskIds: Object.keys(copiedListTasks),\r\n            },\r\n          },\r\n          columnOrder: newColumnOrder,\r\n          columnCount: copyListColumnCount + 1,\r\n          taskCount: state.demo.taskCount + copiedListTasksArray.length,\r\n        },\r\n      };\r\n    case SORT_LIST:\r\n      console.log('action.column', action.column);\r\n      const newTaskIds = state.demo.columns[action.column.id].taskIds.slice();\r\n      // newTaskIds.sort((a, b) => {\r\n      //   return state.demo.tasks[b].time - state.demo.tasks[a].time;\r\n      // });\r\n      console.log('newTaskIds', newTaskIds);\r\n\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.column.id]: {\r\n              ...state.demo.columns[action.column.id],\r\n              taskIds:\r\n                action.sortType === 'newest'\r\n                  ? newTaskIds.sort(\r\n                      (a, b) =>\r\n                        state.demo.tasks[a].time - state.demo.tasks[b].time\r\n                    )\r\n                  : action.sortType === 'oldest'\r\n                  ? newTaskIds.sort(\r\n                      (a, b) =>\r\n                        state.demo.tasks[b].time - state.demo.tasks[a].time\r\n                    )\r\n                  : action.sortType === 'abc'\r\n                  ? newTaskIds.sort(function (a, b) {\r\n                      if (\r\n                        state.demo.tasks[a].content <\r\n                        state.demo.tasks[b].content\r\n                      ) {\r\n                        return -1;\r\n                      }\r\n                      if (a.firstname > b.firstname) {\r\n                        return 1;\r\n                      }\r\n                      return 0;\r\n                    })\r\n                  : newTaskIds,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case DELETE_ALL_CARDS:\r\n      console.log('DELETE_ALL_CARDS');\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.column.id]: {\r\n              ...state.demo.columns[action.column.id],\r\n              taskIds: [],\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case DELETE_LIST:\r\n      const newColumns = Object.assign({}, state.demo.columns);\r\n      delete newColumns[action.column.id];\r\n\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          columns: newColumns,\r\n          columnOrder: state.demo.columnOrder.filter(\r\n            (column) => column !== action.column.id\r\n          ),\r\n        },\r\n      };\r\n    case CHANGE_CARD_CONTENT:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.task.id]: {\r\n              ...state.demo.tasks[action.task.id],\r\n              content: action.newContent,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_LABEL:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.task.id]: {\r\n              ...state.demo.tasks[action.task.id],\r\n              labels:\r\n                state.demo.tasks[action.task.id].labels.find(\r\n                  (label) => label.id === action.label.id\r\n                ) === undefined\r\n                  ? [...state.demo.tasks[action.task.id].labels, action.label]\r\n                  : state.demo.tasks[action.task.id].labels.filter(\r\n                      (label) => label.id !== action.label.id\r\n                    ),\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.task.id]: {\r\n              ...state.demo.tasks[action.task.id],\r\n              showCardModal: action.bool,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL_MENU:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.task.id]: {\r\n              ...state.demo.tasks[action.task.id],\r\n              showCardModalMenu: action.bool,\r\n              menuType: action.menuType,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case CHANGE_CARD_MODAL_MENU_TYPE:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.task.id]: {\r\n              ...state.demo.tasks[action.task.id],\r\n              menuType: action.menuType,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case DELETE_LABEL:\r\n      const copyTasks = Object.assign({}, state.demo.tasks);\r\n      for (const task in copyTasks) {\r\n        copyTasks[task].labels = copyTasks[task].labels.filter(\r\n          (label) => label.id !== action.labelId\r\n        );\r\n      }\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: copyTasks,\r\n        },\r\n      };\r\n    case DELETE_CARD:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.column.id]: {\r\n              ...state.demo.columns[action.column.id],\r\n              taskIds: action.column.taskIds.filter(\r\n                (taskId) => taskId !== action.task.id\r\n              ),\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case COPY_CARD:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          taskCount: state.demo.taskCount + 1,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.id]: {\r\n              ...action.task,\r\n              id: action.id,\r\n              time: Date.now(),\r\n              showCardModal: false,\r\n              showCardModalMenu: false,\r\n            },\r\n          },\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.column.id]: {\r\n              ...state.demo.columns[action.column.id],\r\n              taskIds: [\r\n                ...state.demo.columns[action.column.id].taskIds,\r\n                action.id,\r\n              ],\r\n            },\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default data;\r\n","import {\r\n  TOGGLE_ADD_CARD,\r\n  TOGGLE_CARD_MODAL,\r\n  TOGGLE_CARD_MODAL_MENU,\r\n  GET_POSITION,\r\n  TOGGLE_LABEL_SIZE,\r\n  GET_SEARCH_INPUT,\r\n} from '../actions/menu';\r\nconst defaultState = {\r\n  tasks: {\r\n    'task-1': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-2': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-3': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-4': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-5': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-6': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-7': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n  },\r\n  miniLabel: false,\r\n  searchInput: '',\r\n};\r\nconst menu = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case TOGGLE_ADD_CARD:\r\n      return {\r\n        ...state,\r\n        [action.column]: {\r\n          addCard: action.bool,\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            showCardModal: action.bool,\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL_MENU:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            showCardModalMenu: action.bool,\r\n            menuType: action.menuType,\r\n          },\r\n        },\r\n      };\r\n    case GET_POSITION:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            position: action.position,\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_LABEL_SIZE:\r\n      return {\r\n        ...state,\r\n        miniLabel: state.miniLabel === false ? true : false,\r\n      };\r\n    case GET_SEARCH_INPUT:\r\n      return {\r\n        ...state,\r\n        searchInput: action.input,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default menu;\r\n","import {\r\n  CREATE_LABEL,\r\n  EDIT_LABEL,\r\n  DELETE_LABEL,\r\n  TOGGLE_EDIT_LABEL,\r\n} from '../actions/labels';\r\nconst defaultState = [\r\n  {\r\n    id: 'label-1',\r\n    name: 'ListListListListListListListListListListListListListListListListList',\r\n    color: '#61bd4f',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-2',\r\n    name: 'List Action',\r\n    color: '#f2d600',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-3',\r\n    name: 'Card',\r\n    color: '#ff9f1a',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-4',\r\n    name: 'Card Action',\r\n    color: '#eb5a46',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-5',\r\n    name: 'Labels',\r\n    color: '#c377e0',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-6',\r\n    name: 'Properties',\r\n    color: '#0079bf',\r\n    edit: false,\r\n  },\r\n];\r\nconst labels = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_LABEL:\r\n      if (\r\n        state.find((label) => label.name === action.label.name) === undefined\r\n      ) {\r\n        return [...state, action.label];\r\n      }\r\n      return state;\r\n    case EDIT_LABEL:\r\n      return state.map((label) =>\r\n        label.id === action.labelId\r\n          ? { ...label, name: action.name, color: action.color }\r\n          : label\r\n      );\r\n    case DELETE_LABEL:\r\n      return state.filter((label) => label.id !== action.labelId);\r\n    case TOGGLE_EDIT_LABEL:\r\n      return state.map((label) =>\r\n        label.id === action.labelId ? { ...label, edit: action.bool } : label\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default labels;\r\n","import { combineReducers } from 'redux';\r\nimport data from './data';\r\nimport menu from './menu';\r\nimport labels from './labels';\r\n\r\nexport default combineReducers({ data, menu, labels });\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport Nav from './components/Nav';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers';\nimport './index.sass';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Nav />\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}