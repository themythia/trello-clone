{"version":3,"sources":["actions/data.js","actions/labels.js","actions/menu.js","utils/generateId.js","components/CardModalMenu.js","components/CardModal.js","components/Card.js","components/NewCard.js","components/ListMenu.js","components/List.js","components/NewList.js","utils/initial-data.js","components/App.js","components/Nav.js","reducers/data.js","reducers/menu.js","reducers/labels.js","reducers/index.js","index.js"],"names":["RECEIVE_INITIAL_DATA","UPDATE_DATA","ADD_NEW_LIST","CHANGE_LIST_TITLE","ADD_NEW_CARD","COPY_LIST","SORT_LIST","DELETE_ALL_CARDS","DELETE_LIST","CHANGE_CARD_CONTENT","TOGGLE_LABEL","TOGGLE_CARD_MODAL","TOGGLE_CARD_MODAL_MENU","CHANGE_CARD_MODAL_MENU_TYPE","DELETE_LABEL","DELETE_CARD","COPY_CARD","TOGGLE_LIST_MENU","updateData","data","type","sortList","column","sortType","toggleCardModal","bool","task","toggleCardModalMenu","menuType","changeCardModalMenuType","toggleListMenu","log","CREATE_LABEL","EDIT_LABEL","TOGGLE_EDIT_LABEL","toggleEditLabel","labelId","TOGGLE_ADD_CARD","GET_POSITION","TOGGLE_LABEL_SIZE","GET_SEARCH_INPUT","ADD_LIST_MENU_COLUMN","GET_SCROLL_HEIGHT","DELETE_TASK_FROM_MENU","toggleAddCard","deleteTaskFromMenu","taskId","ID","Math","random","toString","substr","LabelCard","styled","div","props","background","darken","LabelColorPicker","span","lighten","CardModalMenu","onClose","windowSize","position","dispatch","useDispatch","labels","useSelector","store","useState","colorSelected","setColorSelected","editLabel","find","label","edit","searchInput","menu","regex","RegExp","searchInputRef","useRef","tasks","id","name","input","setInput","useEffect","undefined","color","className","style","top","height","menuPosition","Fragment","onClick","placeholder","value","ref","autoFocus","onChange","e","getSearchInput","target","filter","test","map","index","toggleLabel","textOverflow","overflow","whiteSpace","maxWidth","mapLabel","size","htmlFor","verticalAlign","length","CardModal","show","content","textarea","showModalMenu","showCardModalMenu","scrollTop","current","select","useMemo","window","innerHeight","width","innerWidth","modalPosition","left","stopPropagation","spellCheck","preventDefault","newContent","changeCardContent","copyCard","deleteCard","LabelSpan","minified","hover","Card","setHover","setPosition","labelHover","setLabelHover","element","labelSize","miniLabel","showCardModal","taskLabels","rect","getBoundingClientRect","x","y","bottom","right","draggableId","provided","draggableProps","dragHandleProps","innerRef","onMouseEnter","onMouseLeave","onMouseOver","taskLabel","updatedLabel","getPosition","NewCard","cardShow","inputField","addCard","newCard","listId","addNewCard","listener","event","code","document","addEventListener","removeEventListener","onBlur","ListMenu","menuState","setMenuState","visibility","copyList","addListMenuColumn","taskIds","forEach","deleteAllCards","deleteList","forwardedListMenu","forwardRef","List","showInput","setShowInput","title","listMenu","showMenu","columns","Cards","React","memo","changeTitle","contains","droppableId","droppableProps","onScroll","columnId","NewList","setShow","textInput","addNewList","handleNewList","focus","initialData","time","columnOrder","taskCount","columnCount","App","getInitialData","onDragEnd","result","destination","source","start","finish","startTaskIds","finishTaskIds","splice","newStart","newFinish","newState","newTaskIds","newColumnOrder","direction","Nav","state","action","cardCount","Date","now","concat","copiedList","copiedColumnOrder","slice","copiedTasks","copiedStateTasks","Object","assign","newListTasks","reduce","keys","sortNewest","sort","a","b","BigInt","sortOldest","sortAbc","deleteAllCardsTasks","newColumns","newDeleteListTaskIds","newDeleteListTasks","copyTasks","deleteCardTasks","defaultState","console","copiedMenuTasks","combineReducers","createStore","reducer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.95037429.chunk.js","sourcesContent":["export const RECEIVE_INITIAL_DATA = 'RECEIVE_INITIAL_DATA';\r\nexport const UPDATE_DATA = 'UPDATE_DATA';\r\nexport const ADD_NEW_LIST = 'ADD_NEW_LIST';\r\nexport const CHANGE_LIST_TITLE = 'CHANGE_LIST_TITLE';\r\nexport const ADD_NEW_CARD = 'ADD_NEW_CARD';\r\nexport const COPY_LIST = 'COPY_LIST';\r\nexport const SORT_LIST = 'SORT_LIST';\r\nexport const DELETE_ALL_CARDS = 'DELETE_ALL_CARDS';\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const CHANGE_CARD_CONTENT = 'CHANGE_CARD_CONTENT';\r\nexport const TOGGLE_LABEL = 'TOGGLE_LABEL';\r\nexport const TOGGLE_CARD_MODAL = 'TOGGLE_CARD_MODAL';\r\nexport const TOGGLE_CARD_MODAL_MENU = 'TOGGLE_CARD_MODAL_MENU';\r\nexport const CHANGE_CARD_MODAL_MENU_TYPE = 'CHANGE_CARD_MODAL_MENU_TYPE';\r\nexport const DELETE_LABEL = 'DELETE_LABEL';\r\nexport const DELETE_CARD = 'DELETE_CARD';\r\nexport const COPY_CARD = 'COPY_CARD';\r\nexport const TOGGLE_LIST_MENU = 'TOGGLE_LIST_MENU';\r\n\r\n// gets initial data on page load\r\nexport const getInitialData = (data) => ({ type: RECEIVE_INITIAL_DATA, data });\r\n\r\n// updates data on drag events\r\nexport const updateData = (data) => ({ type: UPDATE_DATA, data });\r\n\r\n// adds a new list\r\nexport const handleNewList = (content, id) => ({\r\n  type: ADD_NEW_LIST,\r\n  content,\r\n  id,\r\n});\r\n\r\nexport const changeListTitle = (title, listId) => ({\r\n  type: CHANGE_LIST_TITLE,\r\n  title,\r\n  listId,\r\n});\r\n\r\nexport const addNewCard = (content, listId, id) => ({\r\n  type: ADD_NEW_CARD,\r\n  content,\r\n  listId,\r\n  id,\r\n});\r\n\r\nexport const copyList = (column, index, id) => ({\r\n  type: COPY_LIST,\r\n  column,\r\n  index,\r\n  id,\r\n});\r\n\r\nexport const sortList = (column, sortType) => ({\r\n  type: SORT_LIST,\r\n  sortType,\r\n  column,\r\n});\r\n\r\nexport const deleteAllCards = (column) => ({ type: DELETE_ALL_CARDS, column });\r\n\r\nexport const deleteList = (column) => ({ type: DELETE_LIST, column });\r\n\r\nexport const changeCardContent = (task, newContent) => ({\r\n  type: CHANGE_CARD_CONTENT,\r\n  task,\r\n  newContent,\r\n});\r\n\r\nexport const toggleLabel = (task, label) => ({\r\n  type: TOGGLE_LABEL,\r\n  task,\r\n  label,\r\n});\r\n\r\nexport const toggleCardModal = (bool, task) => ({\r\n  type: TOGGLE_CARD_MODAL,\r\n  task,\r\n  bool,\r\n});\r\n\r\nexport const toggleCardModalMenu = (bool, task, menuType) => ({\r\n  type: TOGGLE_CARD_MODAL_MENU,\r\n  bool,\r\n  task,\r\n  menuType,\r\n});\r\n\r\nexport const changeCardModalMenuType = (task, menuType) => ({\r\n  type: CHANGE_CARD_MODAL_MENU_TYPE,\r\n  task,\r\n  menuType,\r\n});\r\n\r\nexport const deleteLabelFromTask = (labelId) => ({\r\n  type: DELETE_LABEL,\r\n  labelId,\r\n});\r\n\r\nexport const deleteCard = (task, column) => ({\r\n  type: DELETE_CARD,\r\n  task,\r\n  column,\r\n});\r\n\r\nexport const copyCard = (task, column, id) => ({\r\n  type: COPY_CARD,\r\n  task,\r\n  column,\r\n  id,\r\n});\r\n\r\nexport const toggleListMenu = (bool, column, log) => ({\r\n  type: TOGGLE_LIST_MENU,\r\n  bool,\r\n  column,\r\n  log,\r\n});\r\n","export const CREATE_LABEL = 'CREATE_LABEL';\r\nexport const EDIT_LABEL = 'EDIT_LABEL';\r\nexport const DELETE_LABEL = 'DELETE_LABEL';\r\nexport const TOGGLE_EDIT_LABEL = 'TOGGLE_EDIT_LABEL';\r\nexport const createLabel = (label) => ({ type: CREATE_LABEL, label });\r\n\r\nexport const editLabel = (labelId, name, color) => ({\r\n  type: EDIT_LABEL,\r\n  labelId,\r\n  name,\r\n  color,\r\n});\r\nexport const deleteLabel = (labelId) => ({ type: DELETE_LABEL, labelId });\r\n\r\nexport const toggleEditLabel = (labelId = '', bool) => ({\r\n  type: TOGGLE_EDIT_LABEL,\r\n  labelId,\r\n  bool,\r\n});\r\n","export const TOGGLE_ADD_CARD = 'TOGGLE_ADD_CARD';\r\nexport const TOGGLE_CARD_MODAL = 'TOGGLE_CARD_MODAL';\r\nexport const TOGGLE_CARD_MODAL_MENU = 'TOGGLE_CARD_MODAL_MENU';\r\nexport const GET_POSITION = 'GET_POSITION';\r\nexport const ADD_MODAL_STATE = 'ADD_MODAL_STATE';\r\nexport const TOGGLE_LABEL_SIZE = 'TOGGLE_LABEL_SIZE';\r\nexport const GET_SEARCH_INPUT = 'GET_SEARCH_INPUT';\r\nexport const TOGGLE_LIST_MENU = 'TOGGLE_LIST_MENU';\r\nexport const ADD_LIST_MENU_COLUMN = 'ADD_LIST_MENU_COLUMN';\r\nexport const GET_SCROLL_HEIGHT = 'GET_SCROLL_HEIGHT';\r\nexport const DELETE_TASK_FROM_MENU = 'DELETE_TASK_FROM_MENU';\r\n\r\nexport const toggleAddCard = (bool, column) => ({\r\n  type: TOGGLE_ADD_CARD,\r\n  bool,\r\n  column,\r\n});\r\n\r\nexport const toggleCardModal = (bool, task) => ({\r\n  type: TOGGLE_CARD_MODAL,\r\n  task,\r\n  bool,\r\n});\r\n\r\nexport const toggleCardModalMenu = (bool, task, menuType) => ({\r\n  type: TOGGLE_CARD_MODAL_MENU,\r\n  bool,\r\n  task,\r\n  menuType,\r\n});\r\n\r\nexport const getPosition = (task, position) => {\r\n  return {\r\n    type: GET_POSITION,\r\n    task,\r\n    position,\r\n  };\r\n};\r\n\r\nexport const addModalState = () => ({ type: ADD_MODAL_STATE });\r\nexport const miniLabel = () => ({ type: TOGGLE_LABEL_SIZE });\r\nexport const getSearchInput = (input) => ({ type: GET_SEARCH_INPUT, input });\r\n\r\n// Toggles list menu ON/OFF\r\nexport const toggleListMenu = (bool, column) => ({\r\n  type: TOGGLE_LIST_MENU,\r\n  bool,\r\n  column,\r\n});\r\n\r\n// adds a a new column property to store.menu.columns\r\n// WHEN an existing list copied OR a new list created\r\nexport const addListMenuColumn = (column) => ({\r\n  type: ADD_LIST_MENU_COLUMN,\r\n  column,\r\n});\r\n\r\nexport const getScrollHeight = (columnId, scrollTop) => ({\r\n  type: GET_SCROLL_HEIGHT,\r\n  columnId,\r\n  scrollTop,\r\n});\r\n\r\n// deletes task from menu.tasks when card deleted\r\nexport const deleteTaskFromMenu = (taskId) => ({\r\n  type: DELETE_TASK_FROM_MENU,\r\n  taskId,\r\n});\r\n","const ID = () => '_' + Math.random().toString(36).substr(2, 9);\r\nexport default ID;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport { BsPencil } from 'react-icons/bs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { darken, lighten } from 'polished';\r\nimport { FaCheck } from 'react-icons/fa';\r\nimport {\r\n  toggleLabel,\r\n  changeCardModalMenuType,\r\n  deleteLabelFromTask,\r\n} from '../actions/data';\r\nimport { AiOutlineLeft } from 'react-icons/ai';\r\nimport {\r\n  toggleEditLabel,\r\n  editLabel as editLabelFunc,\r\n  createLabel,\r\n} from '../actions/labels';\r\nimport { getSearchInput } from '../actions/menu';\r\nimport ID from '../utils/generateId';\r\n\r\nconst LabelCard = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 244px;\r\n  height: 32px;\r\n  border-radius: 4px;\r\n  line-height: 20px;\r\n  padding: 6px 12px;\r\n  font-weight: 700;\r\n  color: white;\r\n  margin-right: 4px;\r\n  position: relative;\r\n  background-color: ${(props) => props.background};\r\n  transition: all 0.2s;\r\n  cursor: pointer;\r\n  &:hover {\r\n    box-shadow: -8px 0 ${(props) => darken(0.1, props.background)};\r\n    padding-left: 20px;\r\n  }\r\n`;\r\n\r\nconst LabelColorPicker = styled.span`\r\n  display: inline-block;\r\n  width: 48px;\r\n  height: 32px;\r\n  margin: 0 8px 8px 0;\r\n  background: ${(props) => props.background};\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  color: white;\r\n  text-align: center;\r\n  line-height: 32px;\r\n  border-radius: 4px;\r\n  flex-basis: 48px;\r\n  &:hover {\r\n    background: ${(props) => lighten(0.1, props.background)};\r\n  }\r\n  &:nth-of-type(5n) {\r\n    margin-right: 0;\r\n  }\r\n`;\r\n\r\nconst CardModalMenu = ({ onClose, task, windowSize, position }) => {\r\n  const dispatch = useDispatch();\r\n  const labels = useSelector((store) => store.labels);\r\n  const [colorSelected, setColorSelected] = useState(null);\r\n  const editLabel = useSelector((store) =>\r\n    store.labels.find((label) => label.edit === true)\r\n  );\r\n  const searchInput = useSelector((store) => store.menu.searchInput);\r\n  const regex = new RegExp(`(${searchInput})`, 'i');\r\n  const searchInputRef = useRef(null);\r\n\r\n  // const type = useSelector((store) => store.menu.tasks[task.id].menuType);\r\n  const type = useSelector((store) => store.data.tasks[task.id].menuType);\r\n\r\n  const [input, setInput] = useState(editLabel?.name ? editLabel.name : '');\r\n  const colors = [\r\n    '#61bd4f',\r\n    '#f2d600',\r\n    '#ff9f1a',\r\n    '#eb5a46',\r\n    '#c377e0',\r\n    '#0079bf',\r\n    '#00c2e0',\r\n    '#51e898',\r\n    '#ff78cb',\r\n    '#344563',\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (editLabel !== undefined && colorSelected === null) {\r\n      setColorSelected(editLabel.color);\r\n    }\r\n  }, [editLabel, colorSelected]);\r\n\r\n  // repositions the menu if menu overflows the y axis of window\r\n  const menuPosition = () => {\r\n    let top = 1;\r\n    if (position.top + 460 > windowSize.height) {\r\n      top = windowSize.height - (position.top + 468);\r\n    }\r\n    return top;\r\n  };\r\n  \r\n  return (\r\n    <div className='card-modal-menu-div' style={{ top: menuPosition() }}>\r\n      {type === 'label' && (\r\n        <React.Fragment>\r\n          <div className='card-modal-menu-header'>\r\n            <span>Labels</span>\r\n            <IoClose className='card-modal-menu-icon' onClick={onClose} />\r\n          </div>\r\n          <div className='card-modal-menu-main'>\r\n            <input\r\n              type='search'\r\n              placeholder='Search labels...'\r\n              value={searchInput}\r\n              ref={searchInputRef}\r\n              autoFocus\r\n              onChange={(e) => {\r\n                dispatch(getSearchInput(e.target.value));\r\n              }}\r\n            />\r\n            <h6>LABELS</h6>\r\n            <ul>\r\n              {labels\r\n                .filter((label) => regex.test(label.name) === true)\r\n                .map((label, index) => (\r\n                  <li key={index}>\r\n                    <LabelCard\r\n                      background={label.color}\r\n                      onClick={() => {\r\n                        dispatch(toggleLabel(task, label));\r\n                      }}\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          textOverflow: 'ellipsis',\r\n                          overflow: 'hidden',\r\n                          whiteSpace: 'nowrap',\r\n                          maxWidth: '190px',\r\n                        }}\r\n                      >\r\n                        {label.name}\r\n                      </span>\r\n                      {task.labels?.find(\r\n                        (mapLabel) => mapLabel.id === label.id\r\n                      ) && <FaCheck />}\r\n                    </LabelCard>\r\n                    <div\r\n                      onClick={() => {\r\n                        dispatch(toggleEditLabel(label.id, true));\r\n                        dispatch(changeCardModalMenuType(task, 'edit-label'));\r\n                      }}\r\n                      className='edit-button'\r\n                    >\r\n                      <BsPencil className='label-card-edit-icon' size={14} />\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n          </div>\r\n          <div className='card-modal-menu-footer'>\r\n            <button\r\n              onClick={() =>\r\n                dispatch(changeCardModalMenuType(task, 'create-label'))\r\n              }\r\n              className='create-new-label-btn'\r\n            >\r\n              Create a new label\r\n            </button>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n      {(type === 'edit-label' || type === 'create-label') && (\r\n        <React.Fragment>\r\n          <div className='card-modal-menu-header'>\r\n            <AiOutlineLeft\r\n              onClick={() => {\r\n                if (type === 'edit-label') {\r\n                  dispatch(toggleEditLabel(editLabel.id, false));\r\n                }\r\n                dispatch(changeCardModalMenuType(task, 'label'));\r\n              }}\r\n              className='card-modal-menu-icon'\r\n            />\r\n            <span>\r\n              {type === 'edit-label'\r\n                ? 'Change label'\r\n                : type === 'create-label'\r\n                ? 'Create label'\r\n                : type === 'cover'\r\n                ? 'Cover'\r\n                : null}\r\n            </span>\r\n            <IoClose className='card-modal-menu-icon' onClick={onClose} />\r\n          </div>\r\n          <div className='card-modal-menu-main no-border-bottom'>\r\n            {(type === 'create-label' || type === 'edit-label') && (\r\n              <React.Fragment>\r\n                <label htmlFor='text-input'>\r\n                  <h6>Name</h6>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  value={input}\r\n                  onChange={(e) => setInput(e.target.value)}\r\n                  id='text-input'\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n            <h6>Select a color</h6>\r\n            <div className='color-select-div'>\r\n              {colors.map((color, index) => (\r\n                <LabelColorPicker\r\n                  key={index}\r\n                  background={color}\r\n                  onClick={() => setColorSelected(color)}\r\n                >\r\n                  {colorSelected === color && (\r\n                    <FaCheck style={{ verticalAlign: 'middle' }} />\r\n                  )}\r\n                </LabelColorPicker>\r\n              ))}\r\n            </div>\r\n            <div className='card-modal-menu-buttons'>\r\n              <button\r\n                onClick={() => {\r\n                  if (input.length > 0) {\r\n                    if (type === 'edit-label') {\r\n                      dispatch(\r\n                        editLabelFunc(editLabel.id, input, colorSelected)\r\n                      );\r\n                    }\r\n                    if (type === 'create-label') {\r\n                      if (colorSelected !== null) {\r\n                        const id = ID();\r\n                        dispatch(\r\n                          createLabel({\r\n                            id,\r\n                            name: input,\r\n                            color: colorSelected,\r\n                            edit: false,\r\n                          })\r\n                        );\r\n                      }\r\n                    }\r\n                    dispatch(changeCardModalMenuType(task, 'label'));\r\n                  }\r\n                }}\r\n                className='btn-primary'\r\n              >\r\n                {type === 'edit-label'\r\n                  ? `Save`\r\n                  : type === 'create-label'\r\n                  ? 'Create'\r\n                  : null}\r\n              </button>\r\n              {type === 'edit-label' && (\r\n                <button\r\n                  onClick={() => {\r\n                    dispatch(deleteLabelFromTask(editLabel.id));\r\n                    dispatch(changeCardModalMenuType(task, 'label'));\r\n                  }}\r\n                  className='btn-danger'\r\n                >\r\n                  Delete\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default CardModalMenu;\r\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport CardModalMenu from './CardModalMenu';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BsFillTagFill, BsTrashFill } from 'react-icons/bs';\r\nimport { FaCopy } from 'react-icons/fa';\r\nimport { changeCardContent, copyCard } from '../actions/data';\r\nimport {\r\n  toggleCardModal,\r\n  toggleCardModalMenu,\r\n  deleteCard,\r\n} from '../actions/data';\r\nimport { toggleEditLabel } from '../actions/labels';\r\nimport ID from '../utils/generateId';\r\nimport { deleteTaskFromMenu } from '../actions/menu';\r\n\r\nconst CardModal = ({ show, onClose, task, column }) => {\r\n  const dispatch = useDispatch();\r\n  const [input, setInput] = useState(task.content);\r\n  const textarea = useRef(null);\r\n\r\n  const position = useSelector((store) => store.menu.tasks[task.id].position);\r\n  const type = useSelector((store) => store.data.tasks[task.id].menuType);\r\n  const editLabel = useSelector((store) =>\r\n    store.labels.find((label) => label.edit === true)\r\n  );\r\n  const showModalMenu = useSelector(\r\n    (store) => store.data.tasks[task.id].showCardModalMenu\r\n  );\r\n\r\n  const scrollTop = useSelector((store) => store.menu[column.id].scrollTop);\r\n\r\n  useEffect(() => {\r\n    if (type === undefined) {\r\n      textarea.current?.select();\r\n    }\r\n  }, []);\r\n\r\n  const windowSize = useMemo(() => {\r\n    return {\r\n      height: window.innerHeight,\r\n      width: window.innerWidth,\r\n    };\r\n  }, []);\r\n\r\nconst modalPosition = () => {\r\n    let top = position?.top;\r\n    let left = position?.left;\r\n\r\n    if (position?.top > windowSize.height) {\r\n      top = top - scrollTop;\r\n    }\r\n    if (top + 120 > windowSize.height) {\r\n      top = windowSize.height - 130;\r\n    }\r\n\r\n    if (position?.left > windowSize.width) {\r\n      left = windowSize.width;\r\n    }\r\n    if (position?.left < 0) {\r\n      left = 26;\r\n    }\r\n    if (position?.left + 354 > windowSize.width) {\r\n      left = windowSize.width - 354;\r\n    }\r\n    return { top, left };\r\n  };\r\n\r\n  if (show === false) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className='card-modal-div' onClick={onClose}>\r\n      <div\r\n        style={{\r\n          top: modalPosition().top - windowSize.height / 2 + 60,\r\n          left:\r\n            modalPosition().left -\r\n            windowSize.width / 2 +\r\n            position?.width / 2 +\r\n            48,\r\n        }}\r\n        className='card-modal-content'\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        <div className='left'>\r\n          <textarea\r\n            ref={textarea}\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            spellCheck={false}\r\n          />\r\n          <button\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              if (input.length > 0) {\r\n                dispatch(changeCardContent(task, input));\r\n                dispatch(toggleCardModal(false, task));\r\n              }\r\n            }}\r\n            className='text-save-btn'\r\n          >\r\n            Save\r\n          </button>\r\n        </div>\r\n        <div className='right'>\r\n          <button\r\n            onClick={() => {\r\n              dispatch(toggleCardModalMenu(true, task, 'label'));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <BsFillTagFill size={16} className='side-btn-icon' /> Edit labels\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              const id = ID();\r\n              dispatch(copyCard(task, column, id));\r\n              dispatch(toggleCardModal(false, task));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <FaCopy size={16} className='side-btn-icon' /> Copy\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              dispatch(deleteTaskFromMenu(task.id));\r\n              dispatch(deleteCard(task, column));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <BsTrashFill size={16} className='side-btn-icon' /> Delete\r\n          </button>\r\n        </div>\r\n        {showModalMenu === true && (\r\n          <CardModalMenu\r\n            onClose={() => {\r\n              dispatch(toggleEditLabel(editLabel?.id, false));\r\n              dispatch(toggleCardModalMenu(false, task));\r\n            }}\r\n            task={task}\r\n            windowSize={windowSize}\r\n            position={modalPosition()}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CardModal;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport CardModal from './CardModal';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getPosition, miniLabel } from '../actions/menu';\r\nimport { toggleCardModal, toggleCardModalMenu } from '../actions/data';\r\nimport { toggleEditLabel } from '../actions/labels';\r\nimport styled from 'styled-components';\r\nimport { darken } from 'polished';\r\nimport { BsPencil } from 'react-icons/bs';\r\n\r\nconst LabelSpan = styled.span`\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-weight: 700;\r\n  margin: 0 4px 4px 0;\r\n  padding: 0 8px;\r\n  max-width: 210px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  width: ${(props) => (props.minified ? '40px' : 'auto')};\r\n  height: ${(props) => (props.minified ? '8px' : 'auto')};\r\n  background: ${(props) =>\r\n    props.hover ? darken(0.1, props.background) : props.background};\r\n`;\r\n\r\nconst Card = ({ task, index, column }) => {\r\n  const dispatch = useDispatch();\r\n  const [hover, setHover] = useState(false);\r\n  const [position, setPosition] = useState(null);\r\n  const [labelHover, setLabelHover] = useState(false);\r\n\r\n  const element = useRef(null);\r\n\r\n  const labelSize = useSelector((store) => store.menu.miniLabel);\r\n  const editLabel = useSelector((store) =>\r\n    store.labels.find((label) => label.edit === true)\r\n  );\r\n  const showCardModal = useSelector(\r\n    (store) => store.data.tasks[task.id].showCardModal\r\n  );\r\n  const taskLabels = useSelector((store) => store.data.tasks[task.id].labels);\r\n  const labels = useSelector((store) => store.labels);\r\n\r\n  // gets position of card relative to viewport\r\n  useEffect(() => {\r\n    const rect = element.current.getBoundingClientRect();\r\n    const { x, y, top, bottom, left, right, width } = rect;\r\n    setPosition({\r\n      x,\r\n      y,\r\n      top,\r\n      bottom,\r\n      left,\r\n      right,\r\n      width,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Draggable draggableId={task.id} index={index}>\r\n        {(provided) => (\r\n          <div\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n            className='card-container'\r\n            onMouseEnter={() => setHover(true)}\r\n            onMouseLeave={() => setHover(false)}\r\n          >\r\n            <div ref={element}>\r\n              {labels.length > 0 && (\r\n                <div\r\n                  className='card-label-div'\r\n                  onClick={() => dispatch(miniLabel())}\r\n                  onMouseOver={() => setLabelHover(true)}\r\n                  onMouseLeave={() => setLabelHover(false)}\r\n                >\r\n                  {taskLabels.map((taskLabel, index) => {\r\n                    const updatedLabel = labels.find(\r\n                      (label) => label.id === taskLabel.id\r\n                    );\r\n                    return (\r\n                      <LabelSpan\r\n                        key={index}\r\n                        background={updatedLabel.color}\r\n                        hover={labelHover}\r\n                        minified={labelSize}\r\n                      >\r\n                        {!labelSize && updatedLabel.name}\r\n                      </LabelSpan>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n              {task.content}\r\n              {hover === true && (\r\n                <BsPencil\r\n                  onClick={() => {\r\n                    dispatch(getPosition(task, position));\r\n                    dispatch(toggleCardModal(true, task));\r\n                  }}\r\n                  className='card-container-icon'\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n      {showCardModal === true && (\r\n        <CardModal\r\n          show={showCardModal}\r\n          onClose={() => {\r\n            dispatch(toggleCardModal(false, task));\r\n            dispatch(toggleCardModalMenu(false, task, 'label'));\r\n            dispatch(toggleEditLabel(editLabel?.id, false));\r\n          }}\r\n          task={task}\r\n          column={column}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Card;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BiPlus } from 'react-icons/bi';\r\nimport { addNewCard } from '../actions/data';\r\nimport { toggleAddCard } from '../actions/menu';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport ID from '../utils/generateId';\r\n\r\nconst NewCard = ({ column, cardShow }) => {\r\n  const [input, setInput] = useState('');\r\n  const inputField = useRef();\r\n  const dispatch = useDispatch();\r\n  const addCard = useSelector((store) => store.menu[column]?.addCard);\r\n\r\n  useEffect(() => {\r\n    dispatch(toggleAddCard(false, column));\r\n  }, [column]);\r\n\r\n  const newCard = () => {\r\n    const id = ID();\r\n    if (input.length > 0) {\r\n      dispatch(addNewCard(input, column, id));\r\n      setInput('');\r\n      // setShow(false);\r\n      dispatch(toggleAddCard(false, column));\r\n    }\r\n  };\r\n  const reset = () => {\r\n    setInput('');\r\n    // setShow(false);\r\n    dispatch(toggleAddCard(false, column));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const listener = (event) => {\r\n      if (event.code === 'Enter' || event.code === 'NumpadEnter') {\r\n        event.preventDefault();\r\n        newCard();\r\n      }\r\n    };\r\n    document.addEventListener('keydown', listener);\r\n    return () => document.removeEventListener('keydown', listener);\r\n  }, [input]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {addCard !== true ? (\r\n        <span\r\n          className='add-new-card-btn'\r\n          onClick={() => dispatch(toggleAddCard(true, column))}\r\n        >\r\n          <BiPlus size={24} /> Add a card\r\n        </span>\r\n      ) : (\r\n        <div className='add-new-card-menu'>\r\n          <textarea\r\n            type='text'\r\n            value={input}\r\n            placeholder='Enter a title for this card...'\r\n            onChange={(e) => setInput(e.target.value)}\r\n            ref={inputField}\r\n            onBlur={() => {\r\n              if (input.length === 0) {\r\n                dispatch(toggleAddCard(false, column));\r\n              }\r\n            }}\r\n            autoFocus\r\n          />\r\n          <div className='btn-div'>\r\n            <button onClick={newCard}>Add Card</button>\r\n            <button className='transparent' onClick={reset}>\r\n              <IoClose size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default NewCard;\r\n","import React, { useState, forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  toggleAddCard,\r\n  addListMenuColumn,\r\n  deleteTaskFromMenu,\r\n} from '../actions/menu';\r\nimport {\r\n  copyList,\r\n  deleteAllCards,\r\n  deleteList,\r\n  sortList,\r\n  toggleListMenu,\r\n} from '../actions/data';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport { AiOutlineLeft } from 'react-icons/ai';\r\nimport ID from '../utils/generateId';\r\n\r\nconst ListMenu = (props, ref) => {\r\n  const { column, index } = props;\r\n  const dispatch = useDispatch();\r\n  const [menuState, setMenuState] = useState('menu');\r\n\r\n  const add = () => {\r\n    dispatch(toggleAddCard(true, column.id));\r\n    dispatch(toggleListMenu(false, column));\r\n  };\r\n\r\n  const copy = () => {\r\n    const id = ID();\r\n    dispatch(copyList(column, index, id));\r\n    dispatch(toggleListMenu(false, column));\r\n    dispatch(addListMenuColumn(column));\r\n  };\r\n\r\n  const deleteCards = () => {\r\n    column.taskIds.forEach((taskId) => dispatch(deleteTaskFromMenu(taskId)));\r\n    dispatch(deleteAllCards(column));\r\n    dispatch(toggleListMenu(false, column));\r\n  };\r\n\r\n  return (\r\n    <div className='list-menu-div' ref={ref}>\r\n      <div className='list-menu-header'>\r\n        <AiOutlineLeft\r\n          onClick={() => setMenuState('menu')}\r\n          className='list-menu-icon'\r\n          style={{\r\n            visibility: menuState !== 'sort' && 'hidden',\r\n          }}\r\n        />\r\n        <span>{menuState === 'sort' ? `Sort List` : `List actions`}</span>\r\n        <IoClose\r\n          className='list-menu-icon'\r\n          onClick={() => dispatch(toggleListMenu(false, column))}\r\n        />\r\n      </div>\r\n      <div className='list-menu-main'>\r\n        {menuState === 'menu' ? (\r\n          <React.Fragment>\r\n            <span className='list-menu-item' onClick={add}>\r\n              Add card...\r\n            </span>\r\n            <span className='list-menu-item' onClick={copy}>\r\n              Copy list...\r\n            </span>\r\n            <span\r\n              onClick={() => setMenuState('sort')}\r\n              className='list-menu-item'\r\n            >\r\n              Sort by...\r\n            </span>\r\n            <span onClick={deleteCards} className='list-menu-item'>\r\n              Delete all cards in this list\r\n            </span>\r\n            <span\r\n              onClick={() => dispatch(deleteList(column))}\r\n              className='list-menu-item'\r\n            >\r\n              Delete this list\r\n            </span>\r\n          </React.Fragment>\r\n        ) : null}\r\n        {menuState === 'sort' ? (\r\n          <React.Fragment>\r\n            <span\r\n              onClick={() => dispatch(sortList(column, 'newest'))}\r\n              className='list-menu-item'\r\n            >\r\n              Date created (newest first)\r\n            </span>\r\n            <span\r\n              onClick={() => dispatch(sortList(column, 'oldest'))}\r\n              className='list-menu-item'\r\n            >\r\n              Date created (oldest first)\r\n            </span>\r\n            <span\r\n              onClick={() => dispatch(sortList(column, 'abc'))}\r\n              className='list-menu-item'\r\n            >\r\n              Card name (alphabetically)\r\n            </span>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// using forwardRef to access ListMenu in List component\r\nconst forwardedListMenu = forwardRef(ListMenu);\r\nexport default forwardedListMenu;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Card from './Card';\r\nimport NewCard from './NewCard';\r\nimport ListMenu from './ListMenu';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { changeListTitle, toggleListMenu } from '../actions/data';\r\nimport { getScrollHeight } from '../actions/menu';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\n\r\nconst List = ({ column, tasks, index }) => {\r\n  const dispatch = useDispatch();\r\n  const [showInput, setShowInput] = useState(false);\r\n  const [input, setInput] = useState(column.title);\r\n  const listMenu = useRef(null);\r\n\r\n  const showMenu = useSelector(\r\n    (store) => store.data.columns[column.id].showMenu\r\n  );\r\n\r\n  // for optimizing purposes\r\n  const Cards = React.memo(function Cards({ tasks }) {\r\n    return tasks.map((task, index) => (\r\n      <Card key={task.id} task={task} index={index} column={column} />\r\n    ));\r\n  });\r\n\r\n  // if textInput isn't empty,\r\n  // dispatches new list title to store,\r\n  // hides textInput\r\n  const changeTitle = () => {\r\n    if (input.length > 0) {\r\n      dispatch(changeListTitle(input, column.id));\r\n    }\r\n    if (input.length === 0) {\r\n      setInput(column.title);\r\n    }\r\n    setShowInput(false);\r\n  };\r\n\r\n  // listens for enter key to invoke changeTitle() on key press\r\n  useEffect(() => {\r\n    const listener = (e) => {\r\n      if (e.code === 'Enter' || e.code === 'NumpadEnter') {\r\n        e.preventDefault();\r\n        changeTitle();\r\n      }\r\n    };\r\n    document.addEventListener('keydown', listener);\r\n    return () => document.removeEventListener('keydown', listener);\r\n  }, [input]);\r\n\r\n  useEffect(() => {\r\n    // listens for clicks,\r\n    // if clicked outside of list menu\r\n    // hides the menu\r\n    const listener = (e) => {\r\n      if (listMenu.current && !listMenu.current.contains(e.target)) {\r\n        if (e.target.className !== 'list-menu-item') {\r\n          e.preventDefault();\r\n          dispatch(toggleListMenu(false, column));\r\n        }\r\n      }\r\n    };\r\n    // only adds the eventListener if menu is active\r\n    if (showMenu === true) {\r\n      document.addEventListener('click', listener);\r\n    }\r\n    return () => document.removeEventListener('click', listener);\r\n  }, [showMenu]);\r\n\r\n  return (\r\n    <Draggable draggableId={column.id} index={index}>\r\n      {(provided) => (\r\n        <React.Fragment>\r\n          <div\r\n            {...provided.draggableProps}\r\n            ref={provided.innerRef}\r\n            className='list-container'\r\n          >\r\n            {showInput === false ? (\r\n              <div className='title-div'>\r\n                <h3\r\n                  {...provided.dragHandleProps}\r\n                  className='title'\r\n                  onClick={() => setShowInput(true)}\r\n                >\r\n                  {column.title}\r\n                </h3>\r\n                <BsThreeDots\r\n                  className='icon'\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      toggleListMenu(showMenu === false ? true : false, column)\r\n                    )\r\n                  }\r\n                />\r\n                {showMenu && (\r\n                  <ListMenu column={column} index={index} ref={listMenu} />\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <input\r\n                {...provided.dragHandleProps}\r\n                type='text'\r\n                value={input}\r\n                autoFocus\r\n                onChange={(e) => setInput(e.target.value)}\r\n                onBlur={changeTitle}\r\n              ></input>\r\n            )}\r\n\r\n            <Droppable droppableId={column.id} type='task'>\r\n              {(provided) => (\r\n                <div\r\n                  {...provided.droppableProps}\r\n                  ref={provided.innerRef}\r\n                  className='card-list'\r\n                  onScroll={(e) => {\r\n                    dispatch(getScrollHeight(column.id, e.target.scrollTop));\r\n                  }}\r\n                >\r\n                  <Cards tasks={tasks} />\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n            <NewCard column={column.id} />\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\nexport default List;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { handleNewList } from '../actions/data';\r\nimport { BiPlus } from 'react-icons/bi';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport ID from '../utils/generateId';\r\n\r\nconst NewList = () => {\r\n  const [show, setShow] = useState(false);\r\n  const [input, setInput] = useState('');\r\n  const textInput = useRef();\r\n  const dispatch = useDispatch();\r\n\r\n  // if textInput isn't empty,\r\n  // dispatches new list to store,\r\n  // resets textInput value,\r\n  // focuses textInput for next input\r\n  const addNewList = () => {\r\n    const id = ID();\r\n    if (input.length > 0) {\r\n      dispatch(handleNewList(input, id));\r\n      setInput('');\r\n      textInput.current.focus();\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setInput('');\r\n    setShow(false);\r\n  };\r\n\r\n  // listens for enter key to invoke addNewList() on key press\r\n  useEffect(() => {\r\n    const listener = (e) => {\r\n      if (e.code === 'Enter' || e.code === 'NumpadEnter') {\r\n        e.preventDefault();\r\n        addNewList();\r\n      }\r\n    };\r\n    document.addEventListener('keydown', listener);\r\n    return () => document.removeEventListener('keydown', listener);\r\n  }, [input]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {show === false ? (\r\n        <span className='add-new-list-btn' onClick={() => setShow(true)}>\r\n          <BiPlus size={24} /> Add Another List\r\n        </span>\r\n      ) : (\r\n        <div className='add-new-list-menu'>\r\n          <input\r\n            type='text'\r\n            value={input}\r\n            ref={textInput}\r\n            placeholder='Enter list title...'\r\n            autoFocus\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onBlur={() => {\r\n              if (input.length === 0) {\r\n                setShow(false);\r\n              }\r\n            }}\r\n          />\r\n          <div className='btn-div'>\r\n            <button onClick={addNewList}>Add List</button>\r\n            <button className='transparent' onClick={reset}>\r\n              <IoClose size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default NewList;\r\n","const initialData = {\r\n  tasks: {\r\n    'task-1': {\r\n      id: 'task-1',\r\n      content: 'Take out the garbage',\r\n      time: 1629713661276,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-2': {\r\n      id: 'task-2',\r\n      content: 'Watch my fav show',\r\n      time: 1629713661266,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-3': {\r\n      id: 'task-3',\r\n      content: 'Charge my phone',\r\n      time: 1629713661256,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-4': {\r\n      id: 'task-4',\r\n      content: 'Cook dinner',\r\n      time: 1629713661246,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n  },\r\n  columns: {\r\n    'column-1': {\r\n      id: 'column-1',\r\n      title: 'To do',\r\n      taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\r\n      showMenu: false,\r\n    },\r\n    'column-2': {\r\n      id: 'column-2',\r\n      title: 'In Progress',\r\n      taskIds: [],\r\n      showMenu: false,\r\n    },\r\n  },\r\n  // Facilitate reordering of the columns\r\n  columnOrder: ['column-1', 'column-2'],\r\n  taskCount: 4,\r\n  columnCount: 2,\r\n};\r\nexport default initialData;\r\n","import React, { useEffect } from 'react';\r\nimport List from './List';\r\nimport NewList from './NewList';\r\nimport initialData from '../utils/initial-data';\r\nimport '@atlaskit/css-reset';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getInitialData, updateData } from '../actions/data';\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const data = useSelector((store) => store.data);\r\n  \r\n  useEffect(() => {\r\n    dispatch(getInitialData(initialData));\r\n  }, [dispatch]);\r\n\r\n  // reorder column on drag end\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId, type } = result;\r\n    // example of result object\r\n    // result = {\r\n    //   draggableId: 'task-1',\r\n    //   type: 'TYPE',\r\n    //   reason: 'DROP', -- can be DROP or CANCEL\r\n    //   source: {\r\n    //     droppableId: 'column-1',\r\n    //     index: 0\r\n    //   },\r\n    //   -- DESTINATION CAN BE NULL (IF DROPPED OUTSIDE ETC.) --\r\n    //   destination: {\r\n    //     droppableId: 'column-1',\r\n    //     index: 1\r\n    //   }\r\n    // }\r\n\r\n    // if there's no destination,\r\n    // there's no need to reorder the column\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    // if destination is same with the source\r\n    // dragged item stayed in the same position\r\n    // hence no need to reorder the column\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // if dragged item is column, creates a newState\r\n    // and dispatches it to update the store\r\n    if (type === 'column') {\r\n      const newColumnOrder = [...data.columnOrder];\r\n      newColumnOrder.splice(source.index, 1);\r\n      newColumnOrder.splice(destination.index, 0, draggableId);\r\n\r\n      const newState = {\r\n        ...data,\r\n        columnOrder: newColumnOrder,\r\n      };\r\n\r\n      dispatch(updateData(newState));\r\n      return;\r\n    }\r\n\r\n    // Column objects that drag started and finished\r\n    const start = data.columns[source.droppableId];\r\n    const finish = data.columns[destination.droppableId];\r\n\r\n    // if start and finish columns are the same,\r\n    // creates a newState and dispatches to update the store\r\n    if (start === finish) {\r\n      const newTaskIds = [...start.taskIds];\r\n      newTaskIds.splice(source.index, 1);\r\n      newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newState = {\r\n        ...data,\r\n        columns: {\r\n          ...data.columns,\r\n          [start.id]: {\r\n            ...start,\r\n            taskIds: newTaskIds,\r\n          },\r\n        },\r\n      };\r\n\r\n      dispatch(updateData(newState));\r\n      return;\r\n    }\r\n\r\n    // if dragged item moving from one column to another\r\n    // creates a newState to dispatch and update the store\r\n    const startTaskIds = [...start.taskIds];\r\n    const finishTaskIds = [...finish.taskIds];\r\n    startTaskIds.splice(source.index, 1); // removes dragged item from starting column\r\n    finishTaskIds.splice(destination.index, 0, draggableId); // inserts dragged item into finishing column\r\n\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds,\r\n    };\r\n\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds: finishTaskIds,\r\n    };\r\n\r\n    const newState = {\r\n      ...data,\r\n      columns: {\r\n        ...data.columns,\r\n        [newStart.id]: newStart,\r\n        [newFinish.id]: newFinish,\r\n      },\r\n    };\r\n\r\n    dispatch(updateData(newState));\r\n  };\r\n\r\n  //loading\r\n  if (data.columnOrder === undefined) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Droppable droppableId='all-columns' direction='horizontal' type='column'>\r\n        {(provided) => (\r\n          <div\r\n            {...provided.droppableProps}\r\n            className='container'\r\n            ref={provided.innerRef}\r\n          >\r\n            {data.columnOrder.map((columnId, index) => {\r\n              const column = data.columns[columnId];\r\n              const tasks = column?.taskIds.map((taskId) => data.tasks[taskId]);\r\n              return (\r\n                <List\r\n                  key={column.id}\r\n                  column={column}\r\n                  tasks={tasks}\r\n                  index={index}\r\n                />\r\n              );\r\n            })}\r\n            {provided.placeholder}\r\n            <NewList />\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { IoMdListBox } from 'react-icons/io';\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div className='nav-div'>\r\n      <div className='nav-top'>\r\n        <IoMdListBox size={22} style={{ verticalAlign: 'middle' }} />\r\n        <span>Trello-Clone</span>\r\n      </div>\r\n      <div className='nav-bottom'></div>\r\n    </div>\r\n  );\r\n};\r\nexport default Nav;\r\n","/* eslint-disable no-undef */\r\nimport {\r\n  RECEIVE_INITIAL_DATA,\r\n  UPDATE_DATA,\r\n  ADD_NEW_LIST,\r\n  CHANGE_LIST_TITLE,\r\n  ADD_NEW_CARD,\r\n  COPY_LIST,\r\n  SORT_LIST,\r\n  DELETE_ALL_CARDS,\r\n  DELETE_LIST,\r\n  CHANGE_CARD_CONTENT,\r\n  TOGGLE_LABEL,\r\n  TOGGLE_CARD_MODAL,\r\n  TOGGLE_CARD_MODAL_MENU,\r\n  CHANGE_CARD_MODAL_MENU_TYPE,\r\n  DELETE_LABEL,\r\n  DELETE_CARD,\r\n  COPY_CARD,\r\n  TOGGLE_LIST_MENU,\r\n} from '../actions/data';\r\nimport ID from '../utils/generateId';\r\n\r\nconst data = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case RECEIVE_INITIAL_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n      };\r\n    case UPDATE_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n      };\r\n    case ADD_NEW_LIST:\r\n      return {\r\n        ...state,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.id]: {\r\n            id: action.id,\r\n            title: action.content,\r\n            taskIds: [],\r\n            showMenu: false,\r\n          },\r\n        },\r\n        columnOrder: [...state.columnOrder, action.id],\r\n        columnCount: state.columnCount + 1,\r\n      };\r\n    case CHANGE_LIST_TITLE:\r\n      return {\r\n        ...state,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.listId]: {\r\n            ...state.columns[action.listId],\r\n            title: action.title,\r\n          },\r\n        },\r\n      };\r\n    case ADD_NEW_CARD:\r\n      const cardCount = state.taskCount;\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.id]: {\r\n            id: action.id,\r\n            content: action.content,\r\n            labels: [],\r\n            time: Date.now(),\r\n            showCardModal: false,\r\n            showCardModalMenu: false,\r\n          },\r\n        },\r\n        columns: {\r\n          ...state.columns,\r\n          [action.listId]: {\r\n            ...state.columns[action.listId],\r\n            taskIds: state.columns[action.listId].taskIds.concat(action.id),\r\n          },\r\n        },\r\n        taskCount: cardCount + 1,\r\n      };\r\n\r\n    case COPY_LIST:\r\n      const copiedList = {\r\n        id: action.id,\r\n        title: action.column.title,\r\n        taskIds: [],\r\n        showMenu: false,\r\n      };\r\n\r\n      const copiedColumnOrder = state.columnOrder.slice();\r\n      copiedColumnOrder.splice(action.index + 1, 0, action.id);\r\n\r\n      if (action.column.taskIds.length === 0) {\r\n        return {\r\n          ...state,\r\n          columns: {\r\n            ...state.columns,\r\n            [action.id]: copiedList,\r\n          },\r\n          columnOrder: copiedColumnOrder,\r\n          columnCount: state.columnCount + 1,\r\n        };\r\n      }\r\n\r\n      // creates new tasks copied from action.column\r\n      const copiedTasks = action.column.taskIds.map((task) => {\r\n        let id = ID();\r\n        return {\r\n          [id]: {\r\n            ...state.tasks[task],\r\n            id,\r\n          },\r\n        };\r\n      });\r\n\r\n      const copiedStateTasks = Object.assign({}, state.tasks);\r\n      // //reduces copiedTasks and copiedStateTasks in a new object\r\n      const newListTasks = copiedTasks.reduce(\r\n        (target, current) => Object.assign({}, target, current),\r\n        copiedStateTasks\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        tasks: newListTasks,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.id]: {\r\n            ...action.column,\r\n            id: action.id,\r\n            taskIds: copiedTasks.map((task) => Object.keys(task)[0]),\r\n            showMenu: false,\r\n          },\r\n        },\r\n        columnOrder: copiedColumnOrder,\r\n        columnCount: state.columnCount + 1,\r\n        taskCount: state.taskCount + copiedTasks.length,\r\n      };\r\n\r\n    case SORT_LIST:\r\n      let newTaskIds = state.columns[action.column.id].taskIds.slice();\r\n\r\n      const { tasks } = state;\r\n      const sortNewest = () =>\r\n        newTaskIds.sort((a, b) =>\r\n          BigInt(tasks[b].time) > BigInt(tasks[a].time)\r\n            ? 1\r\n            : BigInt(tasks[b].time) < BigInt(tasks[a].time)\r\n            ? -1\r\n            : 0\r\n        );\r\n      const sortOldest = () =>\r\n        newTaskIds.sort((a, b) =>\r\n          BigInt(tasks[b].time) > BigInt(tasks[a].time)\r\n            ? -1\r\n            : BigInt(tasks[b].time) < BigInt(tasks[a].time)\r\n            ? 1\r\n            : 0\r\n        );\r\n\r\n      const sortAbc = () =>\r\n        newTaskIds.sort((a, b) =>\r\n          tasks[a].content < tasks[b].content\r\n            ? -1\r\n            : tasks[a].content > tasks[b].content\r\n            ? 1\r\n            : 0\r\n        );\r\n\r\n      return {\r\n        ...state,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.column.id]: {\r\n            ...state.columns[action.column.id],\r\n            taskIds:\r\n              action.sortType === 'newest'\r\n                ? sortNewest()\r\n                : action.sortType === 'oldest'\r\n                ? sortOldest()\r\n                : action.sortType === 'abc'\r\n                ? sortAbc()\r\n                : newTaskIds,\r\n          },\r\n        },\r\n      };\r\n\r\n    case DELETE_ALL_CARDS:\r\n      // clones tasks object\r\n      const deleteAllCardsTasks = Object.assign({}, state.tasks);\r\n      // deletes all cards from cloned tasks object\r\n      action.column.taskIds.forEach(\r\n        (taskId) => delete deleteAllCardsTasks[taskId]\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        tasks: deleteAllCardsTasks,\r\n        taskCount: state.taskCount - action.column.taskIds.length,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.column.id]: {\r\n            ...state.columns[action.column.id],\r\n            taskIds: [],\r\n          },\r\n        },\r\n      };\r\n\r\n    case DELETE_LIST:\r\n      // clones and creates a new data.columns object\r\n      const newColumns = Object.assign({}, state.columns);\r\n      // clones and creates a new taskIds array of list that will be deleted\r\n      const newDeleteListTaskIds = [...newColumns[action.column.id].taskIds];\r\n      // clones and creates a new data.tasks object\r\n      const newDeleteListTasks = Object.assign({}, state.tasks);\r\n\r\n      // deletes tasks of deleted list from copied tasks object\r\n      newDeleteListTaskIds.forEach(\r\n        (taskId) => delete newDeleteListTasks[taskId]\r\n      );\r\n\r\n      //deletes list from copied columns object\r\n      delete newColumns[action.column.id];\r\n\r\n      return {\r\n        ...state,\r\n        tasks: newDeleteListTasks,\r\n        columns: newColumns,\r\n        columnOrder: state.columnOrder.filter(\r\n          (column) => column !== action.column.id\r\n        ),\r\n        taskCount: Object.keys(newDeleteListTasks).length,\r\n        columnCount: state.columnOrder.length - 1,\r\n      };\r\n    case CHANGE_CARD_CONTENT:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            content: action.newContent,\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_LABEL:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            labels:\r\n              state.tasks[action.task.id].labels.find(\r\n                (label) => label.id === action.label.id\r\n              ) === undefined\r\n                ? [...state.tasks[action.task.id].labels, action.label]\r\n                : state.tasks[action.task.id].labels.filter(\r\n                    (label) => label.id !== action.label.id\r\n                  ),\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            showCardModal: action.bool,\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL_MENU:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            showCardModalMenu: action.bool,\r\n            menuType: action.menuType,\r\n          },\r\n        },\r\n      };\r\n    case CHANGE_CARD_MODAL_MENU_TYPE:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            menuType: action.menuType,\r\n          },\r\n        },\r\n      };\r\n    case DELETE_LABEL:\r\n      const copyTasks = Object.assign({}, state.tasks);\r\n      for (const task in copyTasks) {\r\n        copyTasks[task].labels = copyTasks[task].labels.filter(\r\n          (label) => label.id !== action.labelId\r\n        );\r\n      }\r\n      return {\r\n        ...state,\r\n        tasks: copyTasks,\r\n      };\r\n    case DELETE_CARD:\r\n      // clones task object\r\n      const deleteCardTasks = Object.assign({}, state.tasks);\r\n      // deletes task from cloned object\r\n      delete deleteCardTasks[action.task.id];\r\n\r\n      return {\r\n        ...state,\r\n        tasks: deleteCardTasks,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.column.id]: {\r\n            ...state.columns[action.column.id],\r\n            taskIds: action.column.taskIds.filter(\r\n              (taskId) => taskId !== action.task.id\r\n            ),\r\n          },\r\n        },\r\n        taskCount: state.taskCount - 1,\r\n      };\r\n    case COPY_CARD:\r\n      return {\r\n        ...state,\r\n        taskCount: state.taskCount + 1,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.id]: {\r\n            ...action.task,\r\n            id: action.id,\r\n            time: Date.now(),\r\n            showCardModal: false,\r\n            showCardModalMenu: false,\r\n          },\r\n        },\r\n        columns: {\r\n          ...state.columns,\r\n          [action.column.id]: {\r\n            ...state.columns[action.column.id],\r\n            taskIds: [...state.columns[action.column.id].taskIds, action.id],\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_LIST_MENU:\r\n      return {\r\n        ...state,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.column.id]: {\r\n            ...state.columns[action.column.id],\r\n            showMenu: action.bool,\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default data;\r\n","import {\r\n  TOGGLE_ADD_CARD,\r\n  TOGGLE_CARD_MODAL,\r\n  TOGGLE_CARD_MODAL_MENU,\r\n  GET_POSITION,\r\n  TOGGLE_LABEL_SIZE,\r\n  GET_SEARCH_INPUT,\r\n  TOGGLE_LIST_MENU,\r\n  ADD_LIST_MENU_COLUMN,\r\n  GET_SCROLL_HEIGHT,\r\n  DELETE_TASK_FROM_MENU,\r\n} from '../actions/menu';\r\nconst defaultState = {\r\n  tasks: {\r\n    'task-1': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-2': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-3': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-4': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n  },\r\n  columns: {\r\n    'column-1': {\r\n      showMenu: false,\r\n      scrollTop: 0,\r\n    },\r\n    'column-2': { showMenu: false, scrollTop: 0 },\r\n  },\r\n  miniLabel: false,\r\n  searchInput: '',\r\n};\r\nconst menu = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case TOGGLE_ADD_CARD:\r\n      return {\r\n        ...state,\r\n        [action.column]: {\r\n          addCard: action.bool,\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            showCardModal: action.bool,\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL_MENU:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            showCardModalMenu: action.bool,\r\n            menuType: action.menuType,\r\n          },\r\n        },\r\n      };\r\n    case GET_POSITION:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            position: action.position,\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_LABEL_SIZE:\r\n      return {\r\n        ...state,\r\n        miniLabel: state.miniLabel === false ? true : false,\r\n      };\r\n    case GET_SEARCH_INPUT:\r\n      return {\r\n        ...state,\r\n        searchInput: action.input,\r\n      };\r\n    case TOGGLE_LIST_MENU:\r\n      return {\r\n        ...state,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.column.id]: { showMenu: action.bool },\r\n        },\r\n      };\r\n    case ADD_LIST_MENU_COLUMN:\r\n      console.log({\r\n        ...state.columns,\r\n        [action.column.id]: { showMenu: false, scrollTop: 0 },\r\n      });\r\n      return {\r\n        ...state,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.column.id]: { showMenu: false, scrollTop: 0 },\r\n        },\r\n      };\r\n    case GET_SCROLL_HEIGHT:\r\n      return {\r\n        ...state,\r\n        [action.columnId]: {\r\n          ...state[action.columnId],\r\n          scrollTop: action.scrollTop,\r\n        },\r\n      };\r\n    case DELETE_TASK_FROM_MENU:\r\n      const copiedMenuTasks = Object.assign({}, state.tasks);\r\n      delete copiedMenuTasks[action.taskId];\r\n      return {\r\n        ...state,\r\n        tasks: copiedMenuTasks,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default menu;\r\n","import {\r\n  CREATE_LABEL,\r\n  EDIT_LABEL,\r\n  DELETE_LABEL,\r\n  TOGGLE_EDIT_LABEL,\r\n} from '../actions/labels';\r\nconst defaultState = [\r\n  {\r\n    id: 'label-1',\r\n    name: 'ListListListListListListListListListListListListListListListListList',\r\n    color: '#61bd4f',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-2',\r\n    name: 'List Action',\r\n    color: '#f2d600',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-3',\r\n    name: 'Card',\r\n    color: '#ff9f1a',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-4',\r\n    name: 'Card Action',\r\n    color: '#eb5a46',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-5',\r\n    name: 'Labels',\r\n    color: '#c377e0',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-6',\r\n    name: 'Properties',\r\n    color: '#0079bf',\r\n    edit: false,\r\n  },\r\n];\r\nconst labels = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_LABEL:\r\n      if (\r\n        state.find((label) => label.name === action.label.name) === undefined\r\n      ) {\r\n        return [...state, action.label];\r\n      }\r\n      return state;\r\n    case EDIT_LABEL:\r\n      return state.map((label) =>\r\n        label.id === action.labelId\r\n          ? { ...label, name: action.name, color: action.color }\r\n          : label\r\n      );\r\n    case DELETE_LABEL:\r\n      return state.filter((label) => label.id !== action.labelId);\r\n    case TOGGLE_EDIT_LABEL:\r\n      return state.map((label) =>\r\n        label.id === action.labelId ? { ...label, edit: action.bool } : label\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default labels;\r\n","import { combineReducers } from 'redux';\r\nimport data from './data';\r\nimport menu from './menu';\r\nimport labels from './labels';\r\n\r\nexport default combineReducers({ data, menu, labels });\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport Nav from './components/Nav';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducer from './reducers';\r\nimport './index.sass';\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Nav />\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}