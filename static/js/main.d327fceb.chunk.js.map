{"version":3,"sources":["actions/data.js","actions/labels.js","actions/menu.js","utils/generateId.js","components/CardModalMenu.js","components/CardModal.js","components/Card.js","components/NewCard.js","components/ListMenu.js","components/List.js","components/NewList.js","utils/initial-data.js","components/App.js","components/Nav.js","reducers/data.js","reducers/menu.js","reducers/labels.js","reducers/index.js","index.js"],"names":["RECEIVE_INITIAL_DATA","UPDATE_DATA","ADD_NEW_LIST","CHANGE_LIST_TITLE","ADD_NEW_CARD","COPY_LIST","SORT_LIST","DELETE_ALL_CARDS","DELETE_LIST","CHANGE_CARD_CONTENT","TOGGLE_LABEL","TOGGLE_CARD_MODAL","TOGGLE_CARD_MODAL_MENU","CHANGE_CARD_MODAL_MENU_TYPE","DELETE_LABEL","DELETE_CARD","COPY_CARD","TOGGLE_LIST_MENU","updateData","data","type","sortList","column","sortType","toggleCardModal","bool","task","toggleCardModalMenu","menuType","changeCardModalMenuType","toggleListMenu","log","CREATE_LABEL","EDIT_LABEL","TOGGLE_EDIT_LABEL","toggleEditLabel","labelId","TOGGLE_ADD_CARD","GET_POSITION","TOGGLE_LABEL_SIZE","GET_SEARCH_INPUT","ADD_LIST_MENU_COLUMN","GET_SCROLL_HEIGHT","toggleAddCard","ID","Math","random","toString","substr","LabelCard","styled","div","props","background","darken","LabelColorPicker","span","lighten","CardModalMenu","size","bg","onClose","dispatch","useDispatch","labels","useSelector","store","useState","colorSelected","setColorSelected","editLabel","find","label","edit","searchInput","menu","regex","RegExp","searchInputRef","useRef","demo","tasks","id","name","input","setInput","useEffect","undefined","color","className","Fragment","onClick","placeholder","value","ref","autoFocus","onChange","e","getSearchInput","target","filter","test","map","index","toggleLabel","style","textOverflow","overflow","whiteSpace","maxWidth","mapLabel","htmlFor","verticalAlign","length","CardModal","show","content","textarea","position","showModalMenu","showCardModalMenu","scrollTop","current","select","windowSize","useMemo","height","window","innerHeight","width","innerWidth","modalPosition","top","left","stopPropagation","spellCheck","preventDefault","newContent","changeCardContent","copyCard","deleteCard","LabelSpan","minified","hover","Card","setHover","setPosition","labelHover","setLabelHover","element","labelSize","miniLabel","showCardModal","taskLabels","rect","getBoundingClientRect","x","y","bottom","right","draggableId","provided","draggableProps","dragHandleProps","innerRef","onMouseEnter","onMouseLeave","onMouseOver","taskLabel","updatedLabel","getPosition","NewCard","cardShow","inputField","addCard","newCard","listId","addNewCard","listener","event","code","document","addEventListener","removeEventListener","onBlur","ListMenu","menuState","setMenuState","visibility","copyList","addListMenuColumn","deleteAllCards","deleteList","forwardedListMenu","forwardRef","List","showInput","setShowInput","title","listMenu","showMenu","columns","Cards","React","memo","changeTitle","contains","droppableId","droppableProps","onScroll","columnId","NewList","setShow","textInput","addNewList","handleNewList","focus","initialData","time","taskIds","columnOrder","taskCount","columnCount","App","getInitialData","onDragEnd","result","destination","source","start","finish","startTaskIds","finishTaskIds","splice","newStart","newFinish","newState","newTaskIds","newColumnOrder","direction","taskId","Nav","state","new","action","cardCount","Date","now","concat","copiedList","copiedColumnOrder","slice","copiedTasks","copiedStateTasks","Object","assign","newListTasks","reduce","keys","console","sorted","sort","a","b","BigInt","firstname","deleteAllCardsTasks","forEach","newColumns","newDeleteListTaskIds","newDeleteListTasks","copyTasks","deleteCardTasks","defaultState","combineReducers","createStore","reducer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d327fceb.chunk.js","sourcesContent":["export const RECEIVE_INITIAL_DATA = 'RECEIVE_INITIAL_DATA';\r\nexport const UPDATE_DATA = 'UPDATE_DATA';\r\nexport const ADD_NEW_LIST = 'ADD_NEW_LIST';\r\nexport const CHANGE_LIST_TITLE = 'CHANGE_LIST_TITLE';\r\nexport const ADD_NEW_CARD = 'ADD_NEW_CARD';\r\nexport const COPY_LIST = 'COPY_LIST';\r\nexport const SORT_LIST = 'SORT_LIST';\r\nexport const DELETE_ALL_CARDS = 'DELETE_ALL_CARDS';\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const CHANGE_CARD_CONTENT = 'CHANGE_CARD_CONTENT';\r\nexport const TOGGLE_LABEL = 'TOGGLE_LABEL';\r\nexport const TOGGLE_CARD_MODAL = 'TOGGLE_CARD_MODAL';\r\nexport const TOGGLE_CARD_MODAL_MENU = 'TOGGLE_CARD_MODAL_MENU';\r\nexport const CHANGE_CARD_MODAL_MENU_TYPE = 'CHANGE_CARD_MODAL_MENU_TYPE';\r\nexport const DELETE_LABEL = 'DELETE_LABEL';\r\nexport const DELETE_CARD = 'DELETE_CARD';\r\nexport const COPY_CARD = 'COPY_CARD';\r\nexport const TOGGLE_LIST_MENU = 'TOGGLE_LIST_MENU';\r\n\r\n// gets initial data on page load\r\nexport const getInitialData = (data) => ({ type: RECEIVE_INITIAL_DATA, data });\r\n\r\n// updates data on drag events\r\nexport const updateData = (data) => ({ type: UPDATE_DATA, data });\r\n\r\n// adds a new list\r\nexport const handleNewList = (content, id) => ({\r\n  type: ADD_NEW_LIST,\r\n  content,\r\n  id,\r\n});\r\n\r\nexport const changeListTitle = (title, listId) => ({\r\n  type: CHANGE_LIST_TITLE,\r\n  title,\r\n  listId,\r\n});\r\n\r\nexport const addNewCard = (content, listId, id) => ({\r\n  type: ADD_NEW_CARD,\r\n  content,\r\n  listId,\r\n  id,\r\n});\r\n\r\nexport const copyList = (column, index, id) => ({\r\n  type: COPY_LIST,\r\n  column,\r\n  index,\r\n  id,\r\n});\r\n\r\nexport const sortList = (column, sortType) => ({\r\n  type: SORT_LIST,\r\n  sortType,\r\n  column,\r\n});\r\n\r\nexport const deleteAllCards = (column) => ({ type: DELETE_ALL_CARDS, column });\r\n\r\nexport const deleteList = (column) => ({ type: DELETE_LIST, column });\r\n\r\nexport const changeCardContent = (task, newContent) => ({\r\n  type: CHANGE_CARD_CONTENT,\r\n  task,\r\n  newContent,\r\n});\r\n\r\nexport const toggleLabel = (task, label) => ({\r\n  type: TOGGLE_LABEL,\r\n  task,\r\n  label,\r\n});\r\n\r\nexport const toggleCardModal = (bool, task) => ({\r\n  type: TOGGLE_CARD_MODAL,\r\n  task,\r\n  bool,\r\n});\r\n\r\nexport const toggleCardModalMenu = (bool, task, menuType) => ({\r\n  type: TOGGLE_CARD_MODAL_MENU,\r\n  bool,\r\n  task,\r\n  menuType,\r\n});\r\n\r\nexport const changeCardModalMenuType = (task, menuType) => ({\r\n  type: CHANGE_CARD_MODAL_MENU_TYPE,\r\n  task,\r\n  menuType,\r\n});\r\n\r\nexport const deleteLabelFromTask = (labelId) => ({\r\n  type: DELETE_LABEL,\r\n  labelId,\r\n});\r\n\r\nexport const deleteCard = (task, column) => ({\r\n  type: DELETE_CARD,\r\n  task,\r\n  column,\r\n});\r\n\r\nexport const copyCard = (task, column, id) => ({\r\n  type: COPY_CARD,\r\n  task,\r\n  column,\r\n  id,\r\n});\r\n\r\nexport const toggleListMenu = (bool, column, log) => ({\r\n  type: TOGGLE_LIST_MENU,\r\n  bool,\r\n  column,\r\n  log,\r\n});\r\n","export const CREATE_LABEL = 'CREATE_LABEL';\r\nexport const EDIT_LABEL = 'EDIT_LABEL';\r\nexport const DELETE_LABEL = 'DELETE_LABEL';\r\nexport const TOGGLE_EDIT_LABEL = 'TOGGLE_EDIT_LABEL';\r\nexport const createLabel = (label) => ({ type: CREATE_LABEL, label });\r\n\r\nexport const editLabel = (labelId, name, color) => ({\r\n  type: EDIT_LABEL,\r\n  labelId,\r\n  name,\r\n  color,\r\n});\r\nexport const deleteLabel = (labelId) => ({ type: DELETE_LABEL, labelId });\r\n\r\nexport const toggleEditLabel = (labelId = '', bool) => ({\r\n  type: TOGGLE_EDIT_LABEL,\r\n  labelId,\r\n  bool,\r\n});\r\n","export const TOGGLE_ADD_CARD = 'TOGGLE_ADD_CARD';\r\nexport const TOGGLE_CARD_MODAL = 'TOGGLE_CARD_MODAL';\r\nexport const TOGGLE_CARD_MODAL_MENU = 'TOGGLE_CARD_MODAL_MENU';\r\nexport const GET_POSITION = 'GET_POSITION';\r\nexport const ADD_MODAL_STATE = 'ADD_MODAL_STATE';\r\nexport const TOGGLE_LABEL_SIZE = 'TOGGLE_LABEL_SIZE';\r\nexport const GET_SEARCH_INPUT = 'GET_SEARCH_INPUT';\r\nexport const TOGGLE_LIST_MENU = 'TOGGLE_LIST_MENU';\r\nexport const ADD_LIST_MENU_COLUMN = 'ADD_LIST_MENU_COLUMN';\r\nexport const GET_SCROLL_HEIGHT = 'GET_SCROLL_HEIGHT';\r\n\r\nexport const toggleAddCard = (bool, column) => ({\r\n  type: TOGGLE_ADD_CARD,\r\n  bool,\r\n  column,\r\n});\r\n\r\nexport const toggleCardModal = (bool, task) => ({\r\n  type: TOGGLE_CARD_MODAL,\r\n  task,\r\n  bool,\r\n});\r\n\r\nexport const toggleCardModalMenu = (bool, task, menuType) => ({\r\n  type: TOGGLE_CARD_MODAL_MENU,\r\n  bool,\r\n  task,\r\n  menuType,\r\n});\r\n\r\nexport const getPosition = (task, position) => {\r\n  return {\r\n    type: GET_POSITION,\r\n    task,\r\n    position,\r\n  };\r\n};\r\n\r\nexport const addModalState = () => ({ type: ADD_MODAL_STATE });\r\nexport const miniLabel = () => ({ type: TOGGLE_LABEL_SIZE });\r\nexport const getSearchInput = (input) => ({ type: GET_SEARCH_INPUT, input });\r\n\r\n// Toggles list menu ON/OFF\r\nexport const toggleListMenu = (bool, column) => ({\r\n  type: TOGGLE_LIST_MENU,\r\n  bool,\r\n  column,\r\n});\r\n\r\n// adds a a new column property to store.menu.columns\r\n// WHEN an existing list copied OR a new list created\r\nexport const addListMenuColumn = (column) => ({\r\n  type: ADD_LIST_MENU_COLUMN,\r\n  column,\r\n});\r\n\r\nexport const getScrollHeight = (columnId, scrollTop) => ({\r\n  type: GET_SCROLL_HEIGHT,\r\n  columnId,\r\n  scrollTop,\r\n});\r\n","const ID = () => '_' + Math.random().toString(36).substr(2, 9);\r\nexport default ID;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport { BsPencil } from 'react-icons/bs';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { darken, lighten } from 'polished';\r\nimport { FaCheck } from 'react-icons/fa';\r\nimport {\r\n  toggleLabel,\r\n  changeCardModalMenuType,\r\n  deleteLabelFromTask,\r\n} from '../actions/data';\r\nimport { AiOutlineLeft } from 'react-icons/ai';\r\nimport {\r\n  toggleEditLabel,\r\n  editLabel as editLabelFunc,\r\n  createLabel,\r\n} from '../actions/labels';\r\nimport { getSearchInput, toggleCardModalMenu } from '../actions/menu';\r\nimport ID from '../utils/generateId';\r\n\r\nconst LabelCard = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 244px;\r\n  height: 32px;\r\n  border-radius: 4px;\r\n  line-height: 20px;\r\n  padding: 6px 12px;\r\n  font-weight: 700;\r\n  color: white;\r\n  margin-right: 4px;\r\n  position: relative;\r\n  background-color: ${(props) => props.background};\r\n  transition: all 0.2s;\r\n  cursor: pointer;\r\n  &:hover {\r\n    box-shadow: -8px 0 ${(props) => darken(0.1, props.background)};\r\n    padding-left: 20px;\r\n  }\r\n`;\r\n\r\nconst LabelColorPicker = styled.span`\r\n  display: inline-block;\r\n  width: 48px;\r\n  height: 32px;\r\n  margin: 0 8px 8px 0;\r\n  background: ${(props) => props.background};\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  color: white;\r\n  text-align: center;\r\n  line-height: 32px;\r\n  border-radius: 4px;\r\n  flex-basis: 48px;\r\n  &:hover {\r\n    background: ${(props) => lighten(0.1, props.background)};\r\n  }\r\n  &:nth-of-type(5n) {\r\n    margin-right: 0;\r\n  }\r\n`;\r\n\r\nconst SizeBtn = styled.div`\r\n  border-radius: 4px;\r\n  border: 1px solid lightgrey;\r\n  height: 64px;\r\n  width: 136px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  display: relative;\r\n  z-index: 1;\r\n`;\r\n\r\nconst SizeBtnTop = styled.div`\r\n  height: ${(props) => (props.size === 'small' ? '28px' : '100%')};\r\n  position: relative;\r\n  z-index: ${(props) => (props.size === 'small' ? '1' : '-10')};\r\n  background: ${(props) => (props.bg === null ? 'lightgrey' : props.bg)};\r\n`;\r\nconst SizeBtnBottom = styled.div`\r\n  padding: 6px 4px 4px 6px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n`;\r\n// const LongRow = styled.div`\r\n//   height: 4px;\r\n//   width: 122px;\r\n//   margin-right: 4px;\r\n//   background: ${(props) => (props.bg === null ? 'lightgrey' : '#6B778C')};\r\n//   border-radius: 4px;\r\n// `;\r\n// const ShortRow = styled.div`\r\n//   height: 4px;\r\n//   width: 98px;\r\n//   background: ${(props) => (props.bg === null ? 'lightgrey' : '#6B778C')};\r\n//   border-radius: 4px;\r\n//   margin-bottom: 6px;\r\n// `;\r\n\r\nconst CardModalMenu = ({ onClose, task }) => {\r\n  const dispatch = useDispatch();\r\n  const labels = useSelector((store) => store.labels);\r\n  const [colorSelected, setColorSelected] = useState(null);\r\n  const editLabel = useSelector((store) =>\r\n    store.labels.find((label) => label.edit === true)\r\n  );\r\n  const searchInput = useSelector((store) => store.menu.searchInput);\r\n  const regex = new RegExp(`(${searchInput})`, 'i');\r\n  const searchInputRef = useRef(null);\r\n\r\n  // const type = useSelector((store) => store.menu.tasks[task.id].menuType);\r\n  const type = useSelector((store) => store.data.demo.tasks[task.id].menuType);\r\n\r\n  const [input, setInput] = useState(editLabel?.name ? editLabel.name : '');\r\n  const colors = [\r\n    '#61bd4f',\r\n    '#f2d600',\r\n    '#ff9f1a',\r\n    '#eb5a46',\r\n    '#c377e0',\r\n    '#0079bf',\r\n    '#00c2e0',\r\n    '#51e898',\r\n    '#ff78cb',\r\n    '#344563',\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (editLabel !== undefined && colorSelected === null) {\r\n      setColorSelected(editLabel.color);\r\n    }\r\n  }, [editLabel, colorSelected]);\r\n\r\n  return (\r\n    <div className='card-modal-menu-div'>\r\n      {type === 'label' && (\r\n        <React.Fragment>\r\n          <div className='card-modal-menu-header'>\r\n            <span>Labels</span>\r\n            <IoClose className='card-modal-menu-icon' onClick={onClose} />\r\n          </div>\r\n          <div className='card-modal-menu-main'>\r\n            <input\r\n              type='search'\r\n              placeholder='Search labels...'\r\n              value={searchInput}\r\n              ref={searchInputRef}\r\n              autoFocus\r\n              onChange={(e) => {\r\n                dispatch(getSearchInput(e.target.value));\r\n              }}\r\n            />\r\n            <h6>LABELS</h6>\r\n            <ul>\r\n              {/* {labels.filter((label) => regex.test(label.content))} */}\r\n              {labels\r\n                .filter((label) => regex.test(label.name) === true)\r\n                .map((label, index) => (\r\n                  <li key={index}>\r\n                    <LabelCard\r\n                      background={label.color}\r\n                      onClick={() => {\r\n                        dispatch(toggleLabel(task, label));\r\n                      }}\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          textOverflow: 'ellipsis',\r\n                          overflow: 'hidden',\r\n                          whiteSpace: 'nowrap',\r\n                          maxWidth: '190px',\r\n                        }}\r\n                      >\r\n                        {label.name}\r\n                      </span>\r\n                      {task.labels?.find(\r\n                        (mapLabel) => mapLabel.id === label.id\r\n                      ) && <FaCheck />}\r\n                    </LabelCard>\r\n                    <div\r\n                      onClick={() => {\r\n                        dispatch(toggleEditLabel(label.id, true));\r\n                        dispatch(changeCardModalMenuType(task, 'edit-label'));\r\n                      }}\r\n                      className='edit-button'\r\n                    >\r\n                      <BsPencil className='label-card-edit-icon' size={14} />\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n          </div>\r\n          <div className='card-modal-menu-footer'>\r\n            <button\r\n              onClick={() =>\r\n                dispatch(changeCardModalMenuType(task, 'create-label'))\r\n              }\r\n              className='create-new-label-btn'\r\n            >\r\n              Create a new label\r\n            </button>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n      {(type === 'edit-label' || type === 'create-label') && (\r\n        <React.Fragment>\r\n          <div className='card-modal-menu-header'>\r\n            <AiOutlineLeft\r\n              onClick={() => {\r\n                if (type === 'edit-label') {\r\n                  dispatch(toggleEditLabel(editLabel.id, false));\r\n                }\r\n                // if (type === 'cover') {\r\n                //   dispatch(toggleCardModalMenu(false, task));\r\n                // }\r\n                dispatch(changeCardModalMenuType(task, 'label'));\r\n              }}\r\n              className='card-modal-menu-icon'\r\n            />\r\n            <span>\r\n              {type === 'edit-label'\r\n                ? 'Change label'\r\n                : type === 'create-label'\r\n                ? 'Create label'\r\n                : type === 'cover'\r\n                ? 'Cover'\r\n                : null}\r\n            </span>\r\n            <IoClose className='card-modal-menu-icon' onClick={onClose} />\r\n          </div>\r\n          <div className='card-modal-menu-main no-border-bottom'>\r\n            {(type === 'create-label' || type === 'edit-label') && (\r\n              <React.Fragment>\r\n                <label htmlFor='text-input'>\r\n                  <h6>Name</h6>\r\n                </label>\r\n                <input\r\n                  type='text'\r\n                  value={input}\r\n                  onChange={(e) => setInput(e.target.value)}\r\n                  id='text-input'\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n            {/* {type === 'cover' && (\r\n              <React.Fragment>\r\n                <h6>SIZE</h6>\r\n                <div className='size-btn-div'>\r\n                  <div className='size-btn size-btn-sm'>\r\n                    <SizeBtnTop bg={colorSelected} size='small' />\r\n                    <div className='bottom'>\r\n                      <div className='row-long'></div>\r\n                      <div className='row-short'></div>\r\n                      <div className='row-3'>\r\n                        <div className='left'>\r\n                          <div></div>\r\n                          <div></div>\r\n                        </div>\r\n                        <div className='right'></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='size-btn size-btn-full'>\r\n                    <SizeBtnTop bg={colorSelected} size='full' />\r\n                    <div className='row-div'>\r\n                      <div className='row-long'></div>\r\n                      <div className='row-short'></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </React.Fragment>\r\n            )} */}\r\n            <h6>Select a color</h6>\r\n            <div className='color-select-div'>\r\n              {colors.map((color, index) => (\r\n                <LabelColorPicker\r\n                  key={index}\r\n                  background={color}\r\n                  onClick={() => setColorSelected(color)}\r\n                >\r\n                  {colorSelected === color && (\r\n                    <FaCheck style={{ verticalAlign: 'middle' }} />\r\n                  )}\r\n                </LabelColorPicker>\r\n              ))}\r\n            </div>\r\n            <div className='card-modal-menu-buttons'>\r\n              <button\r\n                onClick={() => {\r\n                  if (input.length > 0) {\r\n                    if (type === 'edit-label') {\r\n                      dispatch(\r\n                        editLabelFunc(editLabel.id, input, colorSelected)\r\n                      );\r\n                    }\r\n                    if (type === 'create-label') {\r\n                      const id = ID();\r\n                      dispatch(\r\n                        createLabel({\r\n                          id,\r\n                          name: input,\r\n                          color: colorSelected,\r\n                          edit: false,\r\n                        })\r\n                      );\r\n                    }\r\n                    dispatch(changeCardModalMenuType(task, 'label'));\r\n                  }\r\n                }}\r\n                className='btn-primary'\r\n              >\r\n                {type === 'edit-label'\r\n                  ? `Save`\r\n                  : type === 'create-label'\r\n                  ? 'Create'\r\n                  : null}\r\n              </button>\r\n              {type === 'edit-label' && (\r\n                <button\r\n                  onClick={() => {\r\n                    dispatch(deleteLabelFromTask(editLabel.id));\r\n                    dispatch(changeCardModalMenuType(task, 'label'));\r\n                  }}\r\n                  className='btn-danger'\r\n                >\r\n                  Delete\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default CardModalMenu;\r\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport CardModalMenu from './CardModalMenu';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BsFillTagFill, BsTrashFill } from 'react-icons/bs';\r\nimport { FaCopy } from 'react-icons/fa';\r\nimport { changeCardContent, copyCard } from '../actions/data';\r\nimport {\r\n  toggleCardModal,\r\n  toggleCardModalMenu,\r\n  deleteCard,\r\n} from '../actions/data';\r\nimport { toggleEditLabel } from '../actions/labels';\r\nimport ID from '../utils/generateId';\r\n\r\nconst CardModal = ({ show, onClose, task, column }) => {\r\n  const dispatch = useDispatch();\r\n  const [input, setInput] = useState(task.content);\r\n  const textarea = useRef(null);\r\n\r\n  const position = useSelector((store) => store.menu.tasks[task.id].position);\r\n  const type = useSelector((store) => store.data.demo.tasks[task.id].menuType);\r\n  const editLabel = useSelector((store) =>\r\n    store.labels.find((label) => label.edit === true)\r\n  );\r\n  const showModalMenu = useSelector(\r\n    (store) => store.data.demo.tasks[task.id].showCardModalMenu\r\n  );\r\n\r\n  const scrollTop = useSelector((store) => store.menu[column.id].scrollTop);\r\n\r\n  useEffect(() => {\r\n    if (type === undefined) {\r\n      textarea.current?.select();\r\n    }\r\n  }, []);\r\n\r\n  const windowSize = useMemo(() => {\r\n    return {\r\n      height: window.innerHeight,\r\n      width: window.innerWidth,\r\n    };\r\n  }, []);\r\n\r\n  const modalPosition = () => {\r\n    let top = position?.top;\r\n    let left = position?.left;\r\n\r\n    if (position?.top > windowSize.height) {\r\n      top = top - scrollTop;\r\n    }\r\n    if (top + 120 > windowSize.height) {\r\n      top = windowSize.height - 130;\r\n    }\r\n\r\n    if (position?.left > windowSize.width) {\r\n      left = windowSize.width;\r\n    }\r\n    if (position?.left + 354 > windowSize.width) {\r\n      left = windowSize.width - 354;\r\n    }\r\n    return { top, left };\r\n  };\r\n\r\n  if (show === false) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className='card-modal-div' onClick={onClose}>\r\n      <div\r\n        style={{\r\n          top: modalPosition().top - windowSize.height / 2 + 60,\r\n          left:\r\n            modalPosition().left -\r\n            windowSize.width / 2 +\r\n            position?.width / 2 +\r\n            48,\r\n        }}\r\n        className='card-modal-content'\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        <div className='left'>\r\n          <textarea\r\n            ref={textarea}\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            spellCheck={false}\r\n          />\r\n          <button\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              if (input.length > 0) {\r\n                dispatch(changeCardContent(task, input));\r\n                dispatch(toggleCardModal(false, task));\r\n              }\r\n            }}\r\n            className='text-save-btn'\r\n          >\r\n            Save\r\n          </button>\r\n        </div>\r\n        <div className='right'>\r\n          {/* <button\r\n            onClick={() => {\r\n              dispatch(toggleCardModalMenu(true, task, 'card'));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <BsCardText size={16} className='side-btn-icon' /> Open card\r\n          </button> */}\r\n          <button\r\n            onClick={() => {\r\n              dispatch(toggleCardModalMenu(true, task, 'label'));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <BsFillTagFill size={16} className='side-btn-icon' /> Edit labels\r\n          </button>\r\n          {/* <button\r\n            onClick={() => {\r\n              dispatch(toggleCardModalMenu(true, task, 'cover'));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <BsCardImage size={16} className='side-btn-icon' /> Change cover\r\n          </button> */}\r\n          <button\r\n            onClick={() => {\r\n              const id = ID();\r\n              dispatch(copyCard(task, column, id));\r\n              dispatch(toggleCardModal(false, task));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <FaCopy size={16} className='side-btn-icon' /> Copy\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              dispatch(deleteCard(task, column));\r\n            }}\r\n            className='side-btn'\r\n          >\r\n            <BsTrashFill size={16} className='side-btn-icon' /> Delete\r\n          </button>\r\n        </div>\r\n        {showModalMenu === true && (\r\n          <CardModalMenu\r\n            onClose={() => {\r\n              dispatch(toggleEditLabel(editLabel?.id, false));\r\n              dispatch(toggleCardModalMenu(false, task));\r\n            }}\r\n            task={task}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CardModal;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport CardModal from './CardModal';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getPosition, miniLabel } from '../actions/menu';\r\nimport { toggleCardModal, toggleCardModalMenu } from '../actions/data';\r\nimport { toggleEditLabel } from '../actions/labels';\r\nimport styled from 'styled-components';\r\nimport { darken } from 'polished';\r\nimport { BsPencil } from 'react-icons/bs';\r\n\r\nconst LabelSpan = styled.span`\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-weight: 700;\r\n  margin: 0 4px 4px 0;\r\n  padding: 0 8px;\r\n  max-width: 210px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  width: ${(props) => (props.minified ? '40px' : 'auto')};\r\n  height: ${(props) => (props.minified ? '8px' : 'auto')};\r\n  background: ${(props) =>\r\n    props.hover ? darken(0.1, props.background) : props.background};\r\n`;\r\n\r\nconst Card = ({ task, index, column }) => {\r\n  const dispatch = useDispatch();\r\n  const [hover, setHover] = useState(false);\r\n  const [position, setPosition] = useState(null);\r\n  const [labelHover, setLabelHover] = useState(false);\r\n\r\n  const element = useRef(null);\r\n\r\n  const labelSize = useSelector((store) => store.menu.miniLabel);\r\n  const editLabel = useSelector((store) =>\r\n    store.labels.find((label) => label.edit === true)\r\n  );\r\n  const showCardModal = useSelector(\r\n    (store) => store.data.demo.tasks[task.id].showCardModal\r\n  );\r\n  const taskLabels = useSelector(\r\n    (store) => store.data.demo.tasks[task.id].labels\r\n  );\r\n  const labels = useSelector((store) => store.labels);\r\n\r\n  // gets position of card relative to viewport\r\n  useEffect(() => {\r\n    const rect = element.current.getBoundingClientRect();\r\n    const { x, y, top, bottom, left, right, width } = rect;\r\n    setPosition({\r\n      x,\r\n      y,\r\n      top,\r\n      bottom,\r\n      left,\r\n      right,\r\n      width,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Draggable draggableId={task.id} index={index}>\r\n        {(provided) => (\r\n          <div\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n            className='card-container'\r\n            onMouseEnter={() => setHover(true)}\r\n            onMouseLeave={() => setHover(false)}\r\n          >\r\n            <div ref={element}>\r\n              {labels.length > 0 && (\r\n                <div\r\n                  className='card-label-div'\r\n                  onClick={() => dispatch(miniLabel())}\r\n                  onMouseOver={() => setLabelHover(true)}\r\n                  onMouseLeave={() => setLabelHover(false)}\r\n                >\r\n                  {taskLabels.map((taskLabel, index) => {\r\n                    const updatedLabel = labels.find(\r\n                      (label) => label.id === taskLabel.id\r\n                    );\r\n                    return (\r\n                      <LabelSpan\r\n                        key={index}\r\n                        background={updatedLabel.color}\r\n                        hover={labelHover}\r\n                        minified={labelSize}\r\n                      >\r\n                        {!labelSize && updatedLabel.name}\r\n                      </LabelSpan>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n              {task.content}\r\n              {hover === true && (\r\n                <BsPencil\r\n                  onClick={() => {\r\n                    dispatch(getPosition(task, position));\r\n                    dispatch(toggleCardModal(true, task));\r\n                  }}\r\n                  className='card-container-icon'\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n      {showCardModal === true && (\r\n        <CardModal\r\n          show={showCardModal}\r\n          onClose={() => {\r\n            dispatch(toggleCardModal(false, task));\r\n            dispatch(toggleCardModalMenu(false, task, 'label'));\r\n            dispatch(toggleEditLabel(editLabel?.id, false));\r\n          }}\r\n          task={task}\r\n          column={column}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Card;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BiPlus } from 'react-icons/bi';\r\nimport { addNewCard } from '../actions/data';\r\nimport { toggleAddCard } from '../actions/menu';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport ID from '../utils/generateId';\r\n\r\nconst NewCard = ({ column, cardShow }) => {\r\n  const [input, setInput] = useState('');\r\n  const inputField = useRef();\r\n  const dispatch = useDispatch();\r\n  const addCard = useSelector((store) => store.menu[column]?.addCard);\r\n\r\n  useEffect(() => {\r\n    dispatch(toggleAddCard(false, column));\r\n  }, [column]);\r\n\r\n  const newCard = () => {\r\n    const id = ID();\r\n    if (input.length > 0) {\r\n      dispatch(addNewCard(input, column, id));\r\n      setInput('');\r\n      // setShow(false);\r\n      dispatch(toggleAddCard(false, column));\r\n    }\r\n  };\r\n  const reset = () => {\r\n    setInput('');\r\n    // setShow(false);\r\n    dispatch(toggleAddCard(false, column));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const listener = (event) => {\r\n      if (event.code === 'Enter' || event.code === 'NumpadEnter') {\r\n        event.preventDefault();\r\n        newCard();\r\n      }\r\n    };\r\n    document.addEventListener('keydown', listener);\r\n    return () => document.removeEventListener('keydown', listener);\r\n  }, [input]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {addCard !== true ? (\r\n        <span\r\n          className='add-new-card-btn'\r\n          onClick={() => dispatch(toggleAddCard(true, column))}\r\n        >\r\n          <BiPlus size={24} /> Add a card\r\n        </span>\r\n      ) : (\r\n        <div className='add-new-card-menu'>\r\n          <textarea\r\n            type='text'\r\n            value={input}\r\n            placeholder='Enter a title for this card...'\r\n            onChange={(e) => setInput(e.target.value)}\r\n            ref={inputField}\r\n            onBlur={() => {\r\n              if (input.length === 0) {\r\n                dispatch(toggleAddCard(false, column));\r\n              }\r\n            }}\r\n            autoFocus\r\n          />\r\n          <div className='btn-div'>\r\n            <button onClick={newCard}>Add Card</button>\r\n            <button className='transparent' onClick={reset}>\r\n              <IoClose size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default NewCard;\r\n","import React, { useState, forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleAddCard, addListMenuColumn } from '../actions/menu';\r\nimport {\r\n  copyList,\r\n  deleteAllCards,\r\n  deleteList,\r\n  sortList,\r\n  toggleListMenu,\r\n} from '../actions/data';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport { AiOutlineLeft } from 'react-icons/ai';\r\nimport ID from '../utils/generateId';\r\n\r\nconst ListMenu = (props, ref) => {\r\n  const { column, index } = props;\r\n  const dispatch = useDispatch();\r\n  const [menuState, setMenuState] = useState('menu');\r\n\r\n  const add = () => {\r\n    dispatch(toggleAddCard(true, column.id));\r\n    dispatch(toggleListMenu(false, column));\r\n  };\r\n\r\n  const copy = () => {\r\n    const id = ID();\r\n    dispatch(copyList(column, index, id));\r\n    dispatch(toggleListMenu(false, column));\r\n    dispatch(addListMenuColumn(column));\r\n  };\r\n\r\n  const deleteCards = () => {\r\n    dispatch(deleteAllCards(column));\r\n    dispatch(toggleListMenu(false, column));\r\n  };\r\n\r\n  return (\r\n    <div className='list-menu-div' ref={ref}>\r\n      <div className='list-menu-header'>\r\n        <AiOutlineLeft\r\n          onClick={() => setMenuState('menu')}\r\n          className='list-menu-icon'\r\n          style={{\r\n            visibility: menuState !== 'sort' && 'hidden',\r\n          }}\r\n        />\r\n        <span>{menuState === 'sort' ? `Sort List` : `List actions`}</span>\r\n        <IoClose\r\n          className='list-menu-icon'\r\n          onClick={() => dispatch(toggleListMenu(false, column))}\r\n        />\r\n      </div>\r\n      <div className='list-menu-main'>\r\n        {menuState === 'menu' ? (\r\n          <React.Fragment>\r\n            <span className='list-menu-item' onClick={add}>\r\n              Add card...\r\n            </span>\r\n            <span className='list-menu-item' onClick={copy}>\r\n              Copy list...\r\n            </span>\r\n            <span\r\n              onClick={() => setMenuState('sort')}\r\n              className='list-menu-item'\r\n            >\r\n              Sort by...\r\n            </span>\r\n            <span onClick={deleteCards} className='list-menu-item'>\r\n              Delete all cards in this list\r\n            </span>\r\n            <span\r\n              onClick={() => dispatch(deleteList(column))}\r\n              className='list-menu-item'\r\n            >\r\n              Delete this list\r\n            </span>\r\n          </React.Fragment>\r\n        ) : null}\r\n        {menuState === 'sort' ? (\r\n          <React.Fragment>\r\n            <span\r\n              onClick={() => dispatch(sortList(column, 'newest'))}\r\n              className='list-menu-item'\r\n            >\r\n              Date created (newest first)\r\n            </span>\r\n            <span\r\n              onClick={() => dispatch(sortList(column, 'oldest'))}\r\n              className='list-menu-item'\r\n            >\r\n              Date created (oldest first)\r\n            </span>\r\n            <span\r\n              onClick={() => dispatch(sortList(column, 'abc'))}\r\n              className='list-menu-item'\r\n            >\r\n              Card name (alphabetically)\r\n            </span>\r\n          </React.Fragment>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// using forwardRef to access ListMenu in List component\r\nconst forwardedListMenu = forwardRef(ListMenu);\r\nexport default forwardedListMenu;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Card from './Card';\r\nimport NewCard from './NewCard';\r\nimport ListMenu from './ListMenu';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { changeListTitle, toggleListMenu } from '../actions/data';\r\nimport { getScrollHeight } from '../actions/menu';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\n\r\nconst List = ({ column, tasks, index }) => {\r\n  const dispatch = useDispatch();\r\n  const [showInput, setShowInput] = useState(false);\r\n  const [input, setInput] = useState(column.title);\r\n  const listMenu = useRef(null);\r\n\r\n  const showMenu = useSelector(\r\n    (store) => store.data.demo.columns[column.id].showMenu\r\n  );\r\n\r\n  // for optimizing purposes\r\n  const Cards = React.memo(function Cards({ tasks }) {\r\n    return tasks.map((task, index) => (\r\n      <Card key={task.id} task={task} index={index} column={column} />\r\n    ));\r\n  });\r\n\r\n  // if textInput isn't empty,\r\n  // dispatches new list title to store,\r\n  // hides textInput\r\n  const changeTitle = () => {\r\n    if (input.length > 0) {\r\n      dispatch(changeListTitle(input, column.id));\r\n    }\r\n    if (input.length === 0) {\r\n      setInput(column.title);\r\n    }\r\n    setShowInput(false);\r\n  };\r\n\r\n  // listens for enter key to invoke changeTitle() on key press\r\n  useEffect(() => {\r\n    const listener = (e) => {\r\n      if (e.code === 'Enter' || e.code === 'NumpadEnter') {\r\n        e.preventDefault();\r\n        changeTitle();\r\n      }\r\n    };\r\n    document.addEventListener('keydown', listener);\r\n    return () => document.removeEventListener('keydown', listener);\r\n  }, [input]);\r\n\r\n  useEffect(() => {\r\n    // listens for clicks,\r\n    // if clicked outside of list menu\r\n    // hides the menu\r\n    const listener = (e) => {\r\n      if (listMenu.current && !listMenu.current.contains(e.target)) {\r\n        if (e.target.className !== 'list-menu-item') {\r\n          e.preventDefault();\r\n          dispatch(toggleListMenu(false, column));\r\n        }\r\n      }\r\n    };\r\n    // only adds the eventListener if menu is active\r\n    if (showMenu === true) {\r\n      document.addEventListener('click', listener);\r\n    }\r\n    return () => document.removeEventListener('click', listener);\r\n  }, [showMenu]);\r\n\r\n  return (\r\n    <Draggable draggableId={column.id} index={index}>\r\n      {(provided) => (\r\n        <React.Fragment>\r\n          <div\r\n            {...provided.draggableProps}\r\n            ref={provided.innerRef}\r\n            className='list-container'\r\n          >\r\n            {showInput === false ? (\r\n              <div className='title-div'>\r\n                <h3\r\n                  {...provided.dragHandleProps}\r\n                  className='title'\r\n                  onClick={() => setShowInput(true)}\r\n                >\r\n                  {column.title}\r\n                </h3>\r\n                <BsThreeDots\r\n                  className='icon'\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      toggleListMenu(showMenu === false ? true : false, column)\r\n                    )\r\n                  }\r\n                />\r\n                {showMenu && (\r\n                  <ListMenu column={column} index={index} ref={listMenu} />\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <input\r\n                {...provided.dragHandleProps}\r\n                type='text'\r\n                value={input}\r\n                autoFocus\r\n                onChange={(e) => setInput(e.target.value)}\r\n                onBlur={changeTitle}\r\n              ></input>\r\n            )}\r\n\r\n            <Droppable droppableId={column.id} type='task'>\r\n              {(provided) => (\r\n                <div\r\n                  {...provided.droppableProps}\r\n                  ref={provided.innerRef}\r\n                  className='card-list'\r\n                  onScroll={(e) => {\r\n                    dispatch(getScrollHeight(column.id, e.target.scrollTop));\r\n                  }}\r\n                >\r\n                  <Cards tasks={tasks} />\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n            <NewCard column={column.id} />\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\nexport default List;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { handleNewList } from '../actions/data';\r\nimport { BiPlus } from 'react-icons/bi';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport ID from '../utils/generateId';\r\n\r\nconst NewList = () => {\r\n  const [show, setShow] = useState(false);\r\n  const [input, setInput] = useState('');\r\n  const textInput = useRef();\r\n  const dispatch = useDispatch();\r\n\r\n  // if textInput isn't empty,\r\n  // dispatches new list to store,\r\n  // resets textInput value,\r\n  // focuses textInput for next input\r\n  const addNewList = () => {\r\n    const id = ID();\r\n    if (input.length > 0) {\r\n      dispatch(handleNewList(input, id));\r\n      setInput('');\r\n      textInput.current.focus();\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setInput('');\r\n    setShow(false);\r\n  };\r\n\r\n  // listens for enter key to invoke addNewList() on key press\r\n  useEffect(() => {\r\n    const listener = (e) => {\r\n      if (e.code === 'Enter' || e.code === 'NumpadEnter') {\r\n        e.preventDefault();\r\n        addNewList();\r\n      }\r\n    };\r\n    document.addEventListener('keydown', listener);\r\n    return () => document.removeEventListener('keydown', listener);\r\n  }, [input]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {show === false ? (\r\n        <span className='add-new-list-btn' onClick={() => setShow(true)}>\r\n          <BiPlus size={24} /> Add Another List\r\n        </span>\r\n      ) : (\r\n        <div className='add-new-list-menu'>\r\n          <input\r\n            type='text'\r\n            value={input}\r\n            ref={textInput}\r\n            placeholder='Enter list title...'\r\n            autoFocus\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onBlur={() => {\r\n              if (input.length === 0) {\r\n                setShow(false);\r\n              }\r\n            }}\r\n          />\r\n          <div className='btn-div'>\r\n            <button onClick={addNewList}>Add List</button>\r\n            <button className='transparent' onClick={reset}>\r\n              <IoClose size={24} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default NewList;\r\n","const initialData = {\r\n  tasks: {\r\n    'task-1': {\r\n      id: 'task-1',\r\n      content: 'Take out the garbage',\r\n      time: 1629713661276,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-2': {\r\n      id: 'task-2',\r\n      content: 'Watch my fav show',\r\n      time: 1629713661266,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-3': {\r\n      id: 'task-3',\r\n      content: 'Charge my phone',\r\n      time: 1629713661256,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-4': {\r\n      id: 'task-4',\r\n      content: 'Cook dinner',\r\n      time: 1629713661246,\r\n      labels: [],\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n  },\r\n  columns: {\r\n    'column-1': {\r\n      id: 'column-1',\r\n      title: 'To do',\r\n      taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\r\n      showMenu: false,\r\n    },\r\n    'column-2': {\r\n      id: 'column-2',\r\n      title: 'In Progress',\r\n      taskIds: [],\r\n      showMenu: false,\r\n    },\r\n  },\r\n  // Facilitate reordering of the columns\r\n  columnOrder: ['column-1', 'column-2'],\r\n  taskCount: 4,\r\n  columnCount: 2,\r\n};\r\nexport default initialData;\r\n","import React, { useEffect } from 'react';\r\nimport List from './List';\r\nimport NewList from './NewList';\r\nimport initialData from '../utils/initial-data';\r\nimport '@atlaskit/css-reset';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getInitialData, updateData } from '../actions/data';\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const data = useSelector((store) => store.data.demo);\r\n\r\n  useEffect(() => {\r\n    dispatch(getInitialData(initialData));\r\n  }, [dispatch]);\r\n\r\n  // reorder column on drag end\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId, type } = result;\r\n    // example of result object\r\n    // result = {\r\n    //   draggableId: 'task-1',\r\n    //   type: 'TYPE',\r\n    //   reason: 'DROP', -- can be DROP or CANCEL\r\n    //   source: {\r\n    //     droppableId: 'column-1',\r\n    //     index: 0\r\n    //   },\r\n    //   -- DESTINATION CAN BE NULL (IF DROPPED OUTSIDE ETC.) --\r\n    //   destination: {\r\n    //     droppableId: 'column-1',\r\n    //     index: 1\r\n    //   }\r\n    // }\r\n\r\n    // if there's no destination,\r\n    // there's no need to reorder the column\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    // if destination is same with the source\r\n    // dragged item stayed in the same position\r\n    // hence no need to reorder the column\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // if dragged item is column, creates a newState\r\n    // and dispatches it to update the store\r\n    if (type === 'column') {\r\n      const newColumnOrder = [...data.columnOrder];\r\n      newColumnOrder.splice(source.index, 1);\r\n      newColumnOrder.splice(destination.index, 0, draggableId);\r\n\r\n      const newState = {\r\n        ...data,\r\n        columnOrder: newColumnOrder,\r\n      };\r\n\r\n      dispatch(updateData(newState));\r\n      return;\r\n    }\r\n\r\n    // Column objects that drag started and finished\r\n    const start = data.columns[source.droppableId];\r\n    const finish = data.columns[destination.droppableId];\r\n\r\n    // if start and finish columns are the same,\r\n    // creates a newState and dispatches to update the store\r\n    if (start === finish) {\r\n      const newTaskIds = [...start.taskIds];\r\n      newTaskIds.splice(source.index, 1);\r\n      newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newState = {\r\n        ...data,\r\n        columns: {\r\n          ...data.columns,\r\n          [start.id]: {\r\n            ...start,\r\n            taskIds: newTaskIds,\r\n          },\r\n        },\r\n      };\r\n\r\n      dispatch(updateData(newState));\r\n      return;\r\n    }\r\n\r\n    // if dragged item moving from one column to another\r\n    // creates a newState to dispatch and update the store\r\n    const startTaskIds = [...start.taskIds];\r\n    const finishTaskIds = [...finish.taskIds];\r\n    startTaskIds.splice(source.index, 1); // removes dragged item from starting column\r\n    finishTaskIds.splice(destination.index, 0, draggableId); // inserts dragged item into finishing column\r\n\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds,\r\n    };\r\n\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds: finishTaskIds,\r\n    };\r\n\r\n    const newState = {\r\n      ...data,\r\n      columns: {\r\n        ...data.columns,\r\n        [newStart.id]: newStart,\r\n        [newFinish.id]: newFinish,\r\n      },\r\n    };\r\n\r\n    dispatch(updateData(newState));\r\n  };\r\n\r\n  //loading\r\n  if (data.columnOrder === undefined) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Droppable droppableId='all-columns' direction='horizontal' type='column'>\r\n        {(provided) => (\r\n          <div\r\n            {...provided.droppableProps}\r\n            className='container'\r\n            ref={provided.innerRef}\r\n          >\r\n            {data.columnOrder.map((columnId, index) => {\r\n              const column = data.columns[columnId];\r\n              const tasks = column?.taskIds.map((taskId) => data.tasks[taskId]);\r\n              return (\r\n                <List\r\n                  key={column.id}\r\n                  column={column}\r\n                  tasks={tasks}\r\n                  index={index}\r\n                />\r\n              );\r\n            })}\r\n            {provided.placeholder}\r\n            <NewList />\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { IoMdListBox } from 'react-icons/io';\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div className='nav-div'>\r\n      <div className='nav-top'>\r\n        <IoMdListBox size={22} style={{ verticalAlign: 'middle' }} />\r\n        <span>Trello-Clone</span>\r\n      </div>\r\n      <div className='nav-bottom'></div>\r\n    </div>\r\n  );\r\n};\r\nexport default Nav;\r\n","/* eslint-disable no-undef */\r\nimport {\r\n  RECEIVE_INITIAL_DATA,\r\n  UPDATE_DATA,\r\n  ADD_NEW_LIST,\r\n  CHANGE_LIST_TITLE,\r\n  ADD_NEW_CARD,\r\n  COPY_LIST,\r\n  SORT_LIST,\r\n  DELETE_ALL_CARDS,\r\n  DELETE_LIST,\r\n  CHANGE_CARD_CONTENT,\r\n  TOGGLE_LABEL,\r\n  TOGGLE_CARD_MODAL,\r\n  TOGGLE_CARD_MODAL_MENU,\r\n  CHANGE_CARD_MODAL_MENU_TYPE,\r\n  DELETE_LABEL,\r\n  DELETE_CARD,\r\n  COPY_CARD,\r\n  TOGGLE_LIST_MENU,\r\n} from '../actions/data';\r\nimport ID from '../utils/generateId';\r\n\r\nconst data = (\r\n  state = {\r\n    demo: {},\r\n    new: { tasks: {}, columns: {}, columnOrder: [], taskCount: 0 },\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case RECEIVE_INITIAL_DATA:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...action.data,\r\n        },\r\n      };\r\n    case UPDATE_DATA:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          ...action.data,\r\n        },\r\n      };\r\n    case ADD_NEW_LIST:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.id]: {\r\n              id: action.id,\r\n              title: action.content,\r\n              taskIds: [],\r\n              showMenu: false,\r\n            },\r\n          },\r\n          columnOrder: [...state.demo.columnOrder, action.id],\r\n          columnCount: state.demo.columnCount + 1,\r\n        },\r\n      };\r\n    case CHANGE_LIST_TITLE:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.listId]: {\r\n              ...state.demo.columns[action.listId],\r\n              title: action.title,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case ADD_NEW_CARD:\r\n      const cardCount = state.demo.taskCount;\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.id]: {\r\n              id: action.id,\r\n              content: action.content,\r\n              labels: [],\r\n              time: Date.now(),\r\n              showCardModal: false,\r\n              showCardModalMenu: false,\r\n            },\r\n          },\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.listId]: {\r\n              ...state.demo.columns[action.listId],\r\n              taskIds: state.demo.columns[action.listId].taskIds.concat(\r\n                action.id\r\n              ),\r\n            },\r\n          },\r\n          taskCount: cardCount + 1,\r\n        },\r\n      };\r\n\r\n    case COPY_LIST:\r\n      const copiedList = {\r\n        id: action.id,\r\n        title: action.column.title,\r\n        taskIds: [],\r\n        showMenu: false,\r\n      };\r\n\r\n      const copiedColumnOrder = state.demo.columnOrder.slice();\r\n      copiedColumnOrder.splice(action.index + 1, 0, action.id);\r\n\r\n      if (action.column.taskIds.length === 0) {\r\n        return {\r\n          ...state,\r\n          demo: {\r\n            ...state.demo,\r\n            columns: {\r\n              ...state.demo.columns,\r\n              [action.id]: copiedList,\r\n            },\r\n            columnOrder: copiedColumnOrder,\r\n            columnCount: state.demo.columnCount + 1,\r\n          },\r\n        };\r\n      }\r\n\r\n      // creates new tasks copied from action.column\r\n      const copiedTasks = action.column.taskIds.map((task) => {\r\n        let id = ID();\r\n        return {\r\n          [id]: {\r\n            ...state.demo.tasks[task],\r\n            id,\r\n          },\r\n        };\r\n      });\r\n\r\n      const copiedStateTasks = Object.assign({}, state.demo.tasks);\r\n      // //reduces copiedTasks and copiedStateTasks in a new object\r\n      const newListTasks = copiedTasks.reduce(\r\n        (target, current) => Object.assign({}, target, current),\r\n        copiedStateTasks\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: newListTasks,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.id]: {\r\n              ...action.column,\r\n              id: action.id,\r\n              taskIds: copiedTasks.map((task) => Object.keys(task)[0]),\r\n              showMenu: false,\r\n            },\r\n          },\r\n          columnOrder: copiedColumnOrder,\r\n          columnCount: state.demo.columnCount + 1,\r\n          taskCount: state.demo.taskCount + copiedTasks.length,\r\n        },\r\n      };\r\n\r\n    case SORT_LIST:\r\n      console.log('action.column', action.column);\r\n      let newTaskIds = state.demo.columns[action.column.id].taskIds.slice();\r\n      const sorted = newTaskIds.map((taskId) => state.demo.tasks[taskId].time);\r\n\r\n      //sorting big numbers\r\n      console.log(\r\n        'sorted',\r\n        // eslint-disable-next-line no-undef\r\n        sorted.sort((a, b) =>\r\n          BigInt(b) > BigInt(a) ? 1 : BigInt(b) < BigInt(a) ? -1 : 0\r\n        )\r\n      );\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.column.id]: {\r\n              ...state.demo.columns[action.column.id],\r\n              taskIds:\r\n                action.sortType === 'newest'\r\n                  ? newTaskIds.sort(\r\n                      (a, b) =>\r\n                        state.demo.tasks[a].time - state.demo.tasks[b].time\r\n                    )\r\n                  : action.sortType === 'oldest'\r\n                  ? newTaskIds.sort(\r\n                      (a, b) =>\r\n                        state.demo.tasks[b].time - state.demo.tasks[a].time\r\n                    )\r\n                  : action.sortType === 'abc'\r\n                  ? newTaskIds.sort(function (a, b) {\r\n                      if (\r\n                        state.demo.tasks[a].content <\r\n                        state.demo.tasks[b].content\r\n                      ) {\r\n                        return -1;\r\n                      }\r\n                      if (a.firstname > b.firstname) {\r\n                        return 1;\r\n                      }\r\n                      return 0;\r\n                    })\r\n                  : newTaskIds,\r\n            },\r\n          },\r\n        },\r\n      };\r\n\r\n    case DELETE_ALL_CARDS:\r\n      // clones tasks object\r\n      const deleteAllCardsTasks = Object.assign({}, state.demo.tasks);\r\n      // deletes all cards from cloned tasks object\r\n      action.column.taskIds.forEach(\r\n        (taskId) => delete deleteAllCardsTasks[taskId]\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: deleteAllCardsTasks,\r\n          taskCount: state.demo.taskCount - action.column.taskIds.length,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.column.id]: {\r\n              ...state.demo.columns[action.column.id],\r\n              taskIds: [],\r\n            },\r\n          },\r\n        },\r\n      };\r\n\r\n    case DELETE_LIST:\r\n      // clones and creates a new data.demo.columns object\r\n      const newColumns = Object.assign({}, state.demo.columns);\r\n      // clones and creates a new taskIds array of list that will be deleted\r\n      const newDeleteListTaskIds = [...newColumns[action.column.id].taskIds];\r\n      // clones and creates a new data.demo.tasks object\r\n      const newDeleteListTasks = Object.assign({}, state.demo.tasks);\r\n\r\n      // deletes tasks of deleted list from copied tasks object\r\n      newDeleteListTaskIds.forEach(\r\n        (taskId) => delete newDeleteListTasks[taskId]\r\n      );\r\n\r\n      //deletes list from copied columns object\r\n      delete newColumns[action.column.id];\r\n\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: newDeleteListTasks,\r\n          columns: newColumns,\r\n          columnOrder: state.demo.columnOrder.filter(\r\n            (column) => column !== action.column.id\r\n          ),\r\n          taskCount: Object.keys(newDeleteListTasks).length,\r\n          columnCount: state.demo.columnOrder.length - 1,\r\n        },\r\n      };\r\n    case CHANGE_CARD_CONTENT:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.task.id]: {\r\n              ...state.demo.tasks[action.task.id],\r\n              content: action.newContent,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_LABEL:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.task.id]: {\r\n              ...state.demo.tasks[action.task.id],\r\n              labels:\r\n                state.demo.tasks[action.task.id].labels.find(\r\n                  (label) => label.id === action.label.id\r\n                ) === undefined\r\n                  ? [...state.demo.tasks[action.task.id].labels, action.label]\r\n                  : state.demo.tasks[action.task.id].labels.filter(\r\n                      (label) => label.id !== action.label.id\r\n                    ),\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.task.id]: {\r\n              ...state.demo.tasks[action.task.id],\r\n              showCardModal: action.bool,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL_MENU:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.task.id]: {\r\n              ...state.demo.tasks[action.task.id],\r\n              showCardModalMenu: action.bool,\r\n              menuType: action.menuType,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case CHANGE_CARD_MODAL_MENU_TYPE:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.task.id]: {\r\n              ...state.demo.tasks[action.task.id],\r\n              menuType: action.menuType,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case DELETE_LABEL:\r\n      const copyTasks = Object.assign({}, state.demo.tasks);\r\n      for (const task in copyTasks) {\r\n        copyTasks[task].labels = copyTasks[task].labels.filter(\r\n          (label) => label.id !== action.labelId\r\n        );\r\n      }\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: copyTasks,\r\n        },\r\n      };\r\n    case DELETE_CARD:\r\n      // clones task object\r\n      const deleteCardTasks = Object.assign({}, state.demo.tasks);\r\n      // deletes task from cloned object\r\n      delete deleteCardTasks[action.task.id];\r\n\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          tasks: deleteCardTasks,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.column.id]: {\r\n              ...state.demo.columns[action.column.id],\r\n              taskIds: action.column.taskIds.filter(\r\n                (taskId) => taskId !== action.task.id\r\n              ),\r\n            },\r\n          },\r\n          taskCount: state.demo.taskCount - 1,\r\n        },\r\n      };\r\n    case COPY_CARD:\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          taskCount: state.demo.taskCount + 1,\r\n          tasks: {\r\n            ...state.demo.tasks,\r\n            [action.id]: {\r\n              ...action.task,\r\n              id: action.id,\r\n              time: Date.now(),\r\n              showCardModal: false,\r\n              showCardModalMenu: false,\r\n            },\r\n          },\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.column.id]: {\r\n              ...state.demo.columns[action.column.id],\r\n              taskIds: [\r\n                ...state.demo.columns[action.column.id].taskIds,\r\n                action.id,\r\n              ],\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_LIST_MENU:\r\n      console.log('logger:', action.log);\r\n      return {\r\n        ...state,\r\n        demo: {\r\n          ...state.demo,\r\n          columns: {\r\n            ...state.demo.columns,\r\n            [action.column.id]: {\r\n              ...state.demo.columns[action.column.id],\r\n              showMenu: action.bool,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default data;\r\n","import {\r\n  TOGGLE_ADD_CARD,\r\n  TOGGLE_CARD_MODAL,\r\n  TOGGLE_CARD_MODAL_MENU,\r\n  GET_POSITION,\r\n  TOGGLE_LABEL_SIZE,\r\n  GET_SEARCH_INPUT,\r\n  TOGGLE_LIST_MENU,\r\n  ADD_LIST_MENU_COLUMN,\r\n  GET_SCROLL_HEIGHT,\r\n} from '../actions/menu';\r\nconst defaultState = {\r\n  tasks: {\r\n    'task-1': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-2': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-3': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n    'task-4': {\r\n      showCardModal: false,\r\n      showCardModalMenu: false,\r\n    },\r\n  },\r\n  columns: {\r\n    'column-1': {\r\n      showMenu: false,\r\n      scrollTop: 0,\r\n    },\r\n    'column-2': { showMenu: false, scrollTop: 0 },\r\n  },\r\n  miniLabel: false,\r\n  searchInput: '',\r\n};\r\nconst menu = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case TOGGLE_ADD_CARD:\r\n      return {\r\n        ...state,\r\n        [action.column]: {\r\n          addCard: action.bool,\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            showCardModal: action.bool,\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_CARD_MODAL_MENU:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            showCardModalMenu: action.bool,\r\n            menuType: action.menuType,\r\n          },\r\n        },\r\n      };\r\n    case GET_POSITION:\r\n      return {\r\n        ...state,\r\n        tasks: {\r\n          ...state.tasks,\r\n          [action.task.id]: {\r\n            ...state.tasks[action.task.id],\r\n            position: action.position,\r\n          },\r\n        },\r\n      };\r\n    case TOGGLE_LABEL_SIZE:\r\n      return {\r\n        ...state,\r\n        miniLabel: state.miniLabel === false ? true : false,\r\n      };\r\n    case GET_SEARCH_INPUT:\r\n      return {\r\n        ...state,\r\n        searchInput: action.input,\r\n      };\r\n    case TOGGLE_LIST_MENU:\r\n      return {\r\n        ...state,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.column.id]: { showMenu: action.bool },\r\n        },\r\n      };\r\n    case ADD_LIST_MENU_COLUMN:\r\n      console.log({\r\n        ...state.columns,\r\n        [action.column.id]: { showMenu: false, scrollTop: 0 },\r\n      });\r\n      return {\r\n        ...state,\r\n        columns: {\r\n          ...state.columns,\r\n          [action.column.id]: { showMenu: false, scrollTop: 0 },\r\n        },\r\n      };\r\n    case GET_SCROLL_HEIGHT:\r\n      return {\r\n        ...state,\r\n        [action.columnId]: {\r\n          ...state[action.columnId],\r\n          scrollTop: action.scrollTop,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default menu;\r\n","import {\r\n  CREATE_LABEL,\r\n  EDIT_LABEL,\r\n  DELETE_LABEL,\r\n  TOGGLE_EDIT_LABEL,\r\n} from '../actions/labels';\r\nconst defaultState = [\r\n  {\r\n    id: 'label-1',\r\n    name: 'ListListListListListListListListListListListListListListListListList',\r\n    color: '#61bd4f',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-2',\r\n    name: 'List Action',\r\n    color: '#f2d600',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-3',\r\n    name: 'Card',\r\n    color: '#ff9f1a',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-4',\r\n    name: 'Card Action',\r\n    color: '#eb5a46',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-5',\r\n    name: 'Labels',\r\n    color: '#c377e0',\r\n    edit: false,\r\n  },\r\n  {\r\n    id: 'label-6',\r\n    name: 'Properties',\r\n    color: '#0079bf',\r\n    edit: false,\r\n  },\r\n];\r\nconst labels = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_LABEL:\r\n      if (\r\n        state.find((label) => label.name === action.label.name) === undefined\r\n      ) {\r\n        return [...state, action.label];\r\n      }\r\n      return state;\r\n    case EDIT_LABEL:\r\n      return state.map((label) =>\r\n        label.id === action.labelId\r\n          ? { ...label, name: action.name, color: action.color }\r\n          : label\r\n      );\r\n    case DELETE_LABEL:\r\n      return state.filter((label) => label.id !== action.labelId);\r\n    case TOGGLE_EDIT_LABEL:\r\n      return state.map((label) =>\r\n        label.id === action.labelId ? { ...label, edit: action.bool } : label\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default labels;\r\n","import { combineReducers } from 'redux';\r\nimport data from './data';\r\nimport menu from './menu';\r\nimport labels from './labels';\r\n\r\nexport default combineReducers({ data, menu, labels });\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport Nav from './components/Nav';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducer from './reducers';\r\nimport './index.sass';\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Nav />\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}